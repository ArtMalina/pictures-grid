{"version":3,"sources":["interfaces/cells.ts","components/Button.tsx","containers/Header/index.ts","containers/Header/Header.tsx","contexts/ServiceContext.ts","components/Canvas.tsx","AppConfig.ts","helpers/canvasMath.ts","components/CellsGrid.tsx","containers/CellsLayout/CellsLayout.tsx","containers/Cart/CartModal.tsx","containers/CellsLayout/index.ts","components/Input.tsx","components/Modal.tsx","services/testDbConfig.ts","services/interfaces.ts","services/mappers.ts","services/TestDataService.ts","App.tsx","index.tsx"],"names":["MyCanvasMouseEvents","MyModes","CartEvents","Button","props","title","event$","toggle","noActive","light","small","color","action","group","noBraces","fullWidth","textAlign","onClickHandler","useCallback","event","stopPropagation","preventDefault","next","type","Close","payload","modifiersTxt","filter","Boolean","map","t","push","className","join","onClick","children","Header","selectedCells$","filterBtn$","useMemo","Subject","useState","togglesState","setToggles","togglesStateRef","useRef","cells","setCells","useEffect","sub","subscribe","ev","console","log","current","ShowOwn","myState","allState","ShowOther","unsubscribe","style","backgroundColor","padding","width","Open","Modify","length","Context","React","createContext","Component","height","canvas2dCtxInList$","Click","onMouseMove","Move","setCanvasElement","el","getValue","ctx","getContext","id","onMouseLeave","ref","appConfig","inRowCells","cellsAmount","cellWidth","cellHeight","cellBorderWidth","maxCanvasWidth","getPointByCellNumber","cellNumber","y","Math","floor","BorderColors","getMin","index","arr","reduce","memo","getMax","COLORS","CellEventTypes","getPointByArea","tiledWidth","tiledHeight","offx","offy","offw","offh","drawCellsGrid","ctx2d","canvasSize","dy","dx","Array","from","forEach","_empty","i","offsetX","ddx","ddy","cellData","x","w","h","beginPath","fillStyle","random","rect","fill","lineWidth","strokeStyle","BASE","stroke","font","fillText","toString","round","drawCell","point","drawCellHovering","_canvasSize","borderWidth","borderColor","pointX","pointY","px","py","drawBoundedTilesImage","image","boundedCellsCoords","left","top","right","bottom","getCropPoint","getRealPoint","cropX","cropY","cropW","cropH","realX","realY","realW","realH","ofstX","ofstY","drawImage","CellsGrid","cellW","cellH","amount","ctx2dInList","displaying","displayCells","clearing","clearCells","tilesForDisplay","displayTiles","highlightCells","clearTiles","clearedCellNumberMap","displayedMap","displayHoverSelectedCells","tileCell","tile","url","img","Image","onload","boundedTiles","src","drawTileCell","isDisplayedOneLst","mouseType","SHOW_FILTERED_TILES","SELECTED","HOVERED","HOVER_SELECTED","CartOpenTypes","MAP_CURR_CELL_EV_TO_CELL_GRID_EV","_i","_arr","curr","CellsLayout","cellSize","cellsUpdate$","currentAcc$","modeRef","Buy","dataService","useContext","ServiceContext","sizeWithOuter","setSize","boxRef","cellsLayoutSizeRef","rowsDataRef","filteredCellsRef","cellTileUpdatesRef","BehaviorSubject","canvasMouseEvent$","cellsGridEvent$","shadeCells","contractTiles$","onBoxRef","finalCellWidth","rectWidth","inRow","finalWidth","rows","ceil","finalHeight","getState","val","cellEvents","updatesRef","cellEventOfIndex","acc","contractTilesData","isUpdateNeeds","displayingUpdatedTiles","tileCells","tileData","lastUpdate","version","UpdateByContract","highlights","Edit","owner","getAccount","None","evType","DisplayAll","DisplayOwnCells","unhighlightCells","notHighlightedSelected","findIndex","Remove","afterRemoveCellEvents","elem","clientX","clientY","currentTarget","offsetLeft","offsetTop","scrollLeft","scrollTop","selectedCellEvents","ft","coordX","coordY","inRowCount","deltaX","deltaY","getCellByClick","newCellData","find","MODE","CURRENT_ADDR","contractTiles","CLICK_TO_NEW_CELL","ADD_NEW_MOVE_CELL","EDIT_NOT_MINE_TILE_OE_EMPTY","result","display","clear","finalCellEvents","lastCell","ct","Canvas","Input","value","state","setState","onChangeHandler","onChange","disabled","Modal","open","groupUrl","includes","ifNewCell","token","BTN_TITLE","EV_NAME","Save","marginLeft","CartModal","modalEvent$","remove$","cartEvent$","tilesState","setTilesState","tilesRef","groupAvatarUrl","input$","inputDataRef","key","launcherSub","ModifyCellsMode","BuyCellsMode","params","inputData","SaveTiles","RemoveItems","marginBottom","price","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","EMPTY_ADDR","fromContractTile","ERROR_TOKEN","_id","tileToFirebaseMapper","item","idPart","tokenId","tileFirebaseMapper","Number","split","tokenFirebaseMapper","tokenToFirebaseMapper","DataService","_account","_state","_firebaseApp","_db","_tilesCollection","_tokensCollection","this","initializeApp","testFirebaseConfig","getFirestore","collection","Promise","resolve","setTimeout","a","getDoc","doc","data","ids","all","fetchTokenInfo","getDocs","tilesSnapshot","tokesSnapshot","tiles","docs","tokens","Date","getTime","contractTile","formTileData","sortedTiles","sort","b","updContractTilePart","tokensPromises","updateDoc","ifParentBounds","k","ifInGroupTileBounds","fetchTiles","currAcc","tData","snapShots","storedTiles","parentTilesTupleIds","parenTileId","buyingTileId","reject","query","where","parentStoredTilesSnapshot","parentStoredTilesForUpd","updatedTile","addDoc","undefined","App","TestDataService","cellEvent$","selectedCellsRef","cartState$","connect","then","isOk","catch","err","evArr","selected","newCells","evCells","DATA_SERVICE_STATE","myAccount","groupTiles","buyTiles","mintTiles","UserUpdateTileGroup","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.182d4c36.chunk.js","sourcesContent":["import { ContractTileInfo, ContractTokenInfo } from \"../services/interfaces\";\n\nexport type TileCoords = [number, number];\n\nexport enum MyCanvasMouseEvents {\n    None = -1,\n    Move = 0,\n    Click = 1\n}\n\nexport enum MyModes {\n    None = '<none>',\n    Buy = '<buy-cell>',\n    Edit = '<edit-cell>',\n}\n\nexport interface ICellData {\n    cellNumber: number;\n    point: TileCoords;\n}\n\nexport type ICellEventData = {\n    lastCell: ICellData;\n    curr: ICellData;\n    mouseType: MyCanvasMouseEvents;\n    // contractTile?: ContractTileInfo;\n    // lastUpdate?: number;\n};\n\nexport enum CartEvents {\n    None = 'None',\n    Open = 'Open',\n    Close = 'Close',\n    Save = 'Save',\n    Buy = 'Buy',\n    RemoveItems = 'RemoveItems',\n    Modify = 'Modify',\n    ShowOwn = 'ShowOwn',\n    ShowOther = 'ShowOther',\n    SaveTiles = 'SaveTiles',\n}\n\ntype CartEventsOfCell =\n    | CartEvents.Close\n    | CartEvents.None\n    | CartEvents.Open\n    | CartEvents.ShowOther\n    | CartEvents.ShowOwn;\n\ntype CellsEventCart = {\n    payload: ICellEventData[];\n    type: CartEventsOfCell;\n    status?: any;\n};\n\ntype TileData = {\n    tile: ContractTileInfo;\n    token: ContractTokenInfo;\n}\n\nexport type ITileState = ICellData & TileData;\n\nexport type IUnmintedTileState = ICellData & Partial<TileData>;\n\nexport type TilesEventCart = {\n    payload: IUnmintedTileState[];\n    params?: Partial<ContractTileInfo>;\n    type:\n    | CartEvents.Close\n    | CartEvents.None\n    | CartEvents.Save\n    | CartEvents.Open\n    | CartEvents.Modify\n    | CartEvents.SaveTiles\n    | CartEvents.Buy\n    | CartEvents.RemoveItems;\n    status?: any;\n    groupUrl: string;\n};\n\nexport type ICartEventData = CellsEventCart | TilesEventCart;\n","import React, { PropsWithChildren, useCallback, useRef, useState } from 'react';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { CartEvents, ICartEventData } from '../interfaces/cells';\n\n\nexport interface IButtonProps<T = any> {\n    title?: string;\n    action?: T;\n    noActive?: boolean;\n    toggle?: undefined | 1 | 2;\n    group?: number;\n    light?: boolean;\n    noBraces?: boolean;\n    fullWidth?: boolean;\n    textAlign?: 'left' | 'center' | 'right';\n    small?: boolean;\n    color?: 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close';\n    event$?: Subject<ICartEventData | T>;\n}\n\nconst Button = (props: PropsWithChildren<IButtonProps>) => {\n    const { title, event$, toggle, noActive, light, small, color, action, group, noBraces, fullWidth, textAlign } = props;\n    const onClickHandler = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        event.stopPropagation();\n        event.preventDefault();\n        event$ && event$.next(action ? { ...action, group } : { type: CartEvents.Close, payload: [] });\n    }, [event$, action, group]);\n\n    const modifiersTxt = [fullWidth && 'full-width', textAlign && `align-${textAlign}`, noActive && 'no-action', light && 'light', small && 'small', color].filter(Boolean).map(t => `btn--${t}`);\n    if (toggle === 1) modifiersTxt.push('btn--untoggled');\n    if (toggle === 2) modifiersTxt.push('btn--toggled');\n    if (group) modifiersTxt.push('btn--grouped');\n    return (\n        <div className={ ['btn', ...modifiersTxt].join(' ') } onClick={ onClickHandler }>\n            { !noBraces && <div className=\"btn_border btn_border--left\"></div> }\n            { !!title && <div className=\"btn-text\">{ title || '' }</div> }\n            { props.children }\n            { !noBraces && <div className=\"btn_border btn_border--right\"></div> }\n        </div>\n    );\n};\n\nexport default Button;","import Header from './Header';\n\nexport default Header;","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport Button from '../../components/Button';\nimport { CartEvents, ICartEventData, ICellData } from '../../interfaces/cells';\n\n\nexport interface IHeaderProps {\n    event$: Subject<ICartEventData>;\n    selectedCells$: BehaviorSubject<ICellData[]>;\n}\n\nconst Header = (props: IHeaderProps) => {\n    const { event$, selectedCells$ } = props;\n    const filterBtn$ = useMemo(() => new Subject<ICartEventData & { group?: number, status?: number }>(), []);\n    const [togglesState, setToggles] = useState<[2 | 1, 2 | 1]>([1, 2]);\n    const togglesStateRef = useRef(togglesState);\n    const [cells, setCells] = useState<ICellData[]>([]);\n    useEffect(() => {\n        const sub = filterBtn$.subscribe((ev) => {\n            console.log('%c filterBtn ev: ', 'background-color: brown; color: white;', ev);\n            console.log('downEv togglesStateRef.current', togglesStateRef.current);\n            if (ev.type === CartEvents.ShowOwn) {\n                if (ev.group) {\n                    const [myState, allState] = togglesStateRef.current;\n                    togglesStateRef.current = [myState === 1 ? 2 : 1, allState === 1 ? 2 : 1];\n                    setToggles(togglesStateRef.current);\n                }\n                return event$.next({\n                    type: togglesStateRef.current[0] === 1 ? CartEvents.ShowOther : CartEvents.ShowOwn,\n                    payload: ev.payload\n                });\n            }\n            event$.next(ev);\n        });\n        return () => sub.unsubscribe();\n    }, [filterBtn$, event$, togglesStateRef]);\n\n    useEffect(() => {\n        const sub = selectedCells$.subscribe((cells) => {\n            console.log('%c selectedCells ev: ', 'background-color: brown; color: white;', cells);\n            setCells([...cells]);\n        });\n        return () => sub.unsubscribe();\n    }, [selectedCells$]);\n\n\n    return <header>\n        <div className=\"header_content\">\n            <div className=\"flex-cnt align-center mx-4\">\n                <Button light color=\"header\" title=\"Hello, crypto man\" />\n            </div>\n            <div style={ { backgroundColor: 'white', padding: '0 10px' } }>\n            </div>\n            <div className=\"flex-cnt align-center\">\n                <div className=\"flex-cnt item fb-3\">\n                    <Button light small color=\"primary\" title=\"TILES\" event$={ filterBtn$ }\n                        action={ { type: CartEvents.ShowOwn, payload: [] } } group={ 1 }>\n                        <Button\n                            event$={ filterBtn$ }\n                            action={ { type: CartEvents.ShowOwn, payload: [] } }\n                            light\n                            small\n                            noBraces\n                            group={ 1 }\n                            toggle={ togglesState[0] }\n                            color=\"primary\"\n                            title=\"MY\"\n                        />\n                        <Button\n                            event$={ filterBtn$ }\n                            action={ { type: CartEvents.ShowOwn, payload: [] } }\n                            light\n                            small\n                            noBraces\n                            group={ 2 }\n                            toggle={ togglesState[1] }\n                            color=\"primary\"\n                            title=\"FOR SALE\"\n                        />\n                    </Button>\n                </div>\n                <div className=\"flex-cnt justify-end\" style={ { width: 250 } }>\n                    <div className=\"flex-cnt item shrink mx-3\">\n                        <Button\n                            event$={ event$ }\n                            action={ { type: togglesState[0] === 1 ? CartEvents.Open : CartEvents.Modify, payload: [] } }\n                            light\n                            color=\"info\"\n                            title={ togglesState[0] === 1 ? \"Buy\" : \"Modify\" }\n                        />\n                    </div>\n                    <div className=\"flex-cnt item shrink badge-cnt\">\n                        { !!cells.length && <div className=\"badge badge--info\">{ togglesState[0] === 1 ? '!' : cells.length }</div> }\n                    </div>\n                </div>\n            </div>\n        </div>\n        {/* 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close' */ }\n        {/* <div className=\"flex-cnt align-center item wrap fb-6\">\n            <Button light color=\"header\" title=\"header\" />\n            <Button light color=\"base\" title=\"base\" />\n            <Button light color=\"active\" title=\"active\" />\n            <Button light color=\"primary\" title=\"primary\" />\n            <Button light color=\"secondary\" title=\"secondary\" />\n            <Button light color=\"info\" title=\"info\" />\n            <Button light color=\"error\" title=\"error\" />\n            <Button light color=\"close\" title=\"close\" />\n            <div className=\"flex-cnt justify-end align-center item\" style={ { backgroundColor: 'white' } }>\n                <Button color=\"header\" title=\"header\" />\n                <Button color=\"base\" title=\"base\" />\n                <Button color=\"active\" title=\"active\" />\n                <Button color=\"primary\" title=\"primary\" />\n                <Button color=\"secondary\" title=\"secondary\" />\n                <Button color=\"info\" title=\"info\" />\n                <Button color=\"error\" title=\"error\" />\n                <Button color=\"close\" title=\"close\" />\n            </div>\n        </div> */}\n    </header>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport { IDataService } from \"../services/interfaces\";\n\nconst Context = React.createContext<IDataService | null>(null);\n\nexport default Context;","import React, { useCallback } from 'react';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { MyCanvasMouseEvents } from '../interfaces/cells';\n\n\nexport interface ICanvasProps {\n    width: number;\n    height: number;\n    canvas2dCtxInList$: BehaviorSubject<CanvasRenderingContext2D[]>;\n    event$: Subject<[MyCanvasMouseEvents, React.MouseEvent<HTMLCanvasElement, MouseEvent>]>;\n}\n\nconst Component = (props: ICanvasProps) => {\n    const { width, height, event$, canvas2dCtxInList$ } = props;\n    const onClick = useCallback((event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n        event$.next([MyCanvasMouseEvents.Click, event]);\n    }, [event$]);\n    const onMouseMove = useCallback((event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n        event$.next([MyCanvasMouseEvents.Move, event]);\n    }, [event$]);\n\n    const setCanvasElement = useCallback((el: HTMLCanvasElement | null) => {\n        if (el && !canvas2dCtxInList$.getValue().length) {\n            const ctx = el.getContext('2d');\n            if (ctx) canvas2dCtxInList$.next([ctx]);\n        }\n    }, [canvas2dCtxInList$]);\n\n    return (\n        <div id=\"canvas-container\" style={ { width, height } }>\n            <canvas\n                id=\"canvas\"\n                onClick={ onClick }\n                onMouseMove={ onMouseMove }\n                onMouseLeave={ onMouseMove }\n                width={ width }\n                height={ height }\n                ref={ setCanvasElement }>\n            </canvas>\n        </div>\n    );\n};\n\nexport default Component;","export interface IAppConfig {\n    cellsAmount: number;\n    inRowCells: number;\n    cellWidth: number;\n    cellHeight: number;\n    cellBorderWidth: number;\n    maxCanvasWidth: number;\n}\n\nexport const appConfig: IAppConfig = {\n    inRowCells: 0,\n    cellsAmount: 500,\n    cellWidth: 50,\n    cellHeight: 50,\n    cellBorderWidth: 2,\n    maxCanvasWidth: 1350,\n}\nappConfig.inRowCells = Math.floor((appConfig.maxCanvasWidth - appConfig.cellBorderWidth) / (appConfig.cellWidth + appConfig.cellBorderWidth));\n","import { appConfig } from '../AppConfig';\nimport { TileCoords } from '../interfaces/cells';\n\n/**\n * \n * @param cellNumber starts from ZERO\n * @returns \n */\nexport function getPointByCellNumber(cellNumber: number): [number, number] {\n    const y = Math.floor(cellNumber / appConfig.inRowCells);\n    const x = cellNumber - appConfig.inRowCells * y;\n    return [x, y];\n}\n\nexport function getCellByClick(coordX: number, coordY: number, { inRowCount, cellW, cellH }: { inRowCount: number, cellW: number, cellH: number }) {\n    const deltaX = Math.floor(coordX / cellW);\n    const deltaY = Math.floor(coordY / cellH);\n    return { cellNumber: deltaY * inRowCount + deltaX, x: deltaX, y: deltaY, w: cellW, h: cellH };\n}\n\nconst getMin = (index: 0 | 1, arr: TileCoords[]) => arr.reduce<TileCoords>((memo, t) => (!memo[0] && !memo[1]) || memo[index] > t[index] ? [t[0], t[1]] : memo, [0, 0]);\nconst getMax = (index: 0 | 1, arr: TileCoords[]) => arr.reduce<TileCoords>((memo, t) => (!memo[0] && !memo[1]) || memo[index] < t[index] ? [t[0], t[1]] : memo, [0, 0]);\n\nexport const getBoundTilesCorners = (arr: TileCoords[]) => {\n\n    const left = getMin(0, arr);\n    const top = getMin(1, arr);\n\n    const right = getMax(0, arr);\n    const bottom = getMax(1, arr);\n\n    return { left, top, right, bottom };\n\n}","import { useEffect } from 'react';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { getBoundTilesCorners, getPointByCellNumber } from '../helpers/canvasMath';\nimport { IEventProps } from '../helpers/IEventProps';\nimport { ICellData, ITileState, MyCanvasMouseEvents, TileCoords } from '../interfaces/cells';\n\n\nexport interface ICellsGridEvent extends ICellData {\n    mouseType: MyCanvasMouseEvents;\n}\n\nexport type CellsGridEventData = {\n    displayCells: ICellsGridEvent[],\n    clearCells: ICellsGridEvent[],\n    displayTiles: ITileState[],\n    clearTiles: ITileState[],\n    highlightCells: ICellsGridEvent[],\n    shadeCells: ICellsGridEvent[],\n};\n\nexport interface ICellsGridProps extends IEventProps<CellsGridEventData> {\n    cellW: number;\n    cellH: number;\n    cellBorderWidth: number;\n    canvasSize: [number, number];\n    amount: number;\n    canvas2dCtxInList$: BehaviorSubject<CanvasRenderingContext2D[]>;\n}\n\nconst COLORS = ['#212529', '#23272c', '#22262b', '#23282e', '#25292e'];\n\n// const BORDER_COLOR = '#000000';\n// // const BORDER_COLOR = '#accaef';\n// const BORDER_HOVER_COLOR = 'yellow';\n// const BORDER_SELECTED_COLOR = 'orange';\n\nenum BorderColors {\n    BASE = '#000000',\n    HOVERED = 'yellow',\n    SELECTED = 'orange',\n    HOVER_SELECTED = '#69f0ae',\n    SHOW_FILTERED_TILES = 'silver'\n    // HOVER_SELECTED = '#00e5ff'\n    // HOVER_SELECTED = '#e64a19'\n    // HOVER_SELECTED = '#76ff03'\n\n}\n\nconst getPointByArea = (tiledWidth: number, tiledHeight: number, offx = 0, offy = 0, offw = 0, offh = 0) =>\n    (t: [number, number, number, number]) => [t[0] * tiledWidth + offx, t[1] * tiledHeight + offy, t[2] * tiledWidth - offw, t[3] * tiledHeight - offh];\n\n\nconst drawCell = (ctx2d: CanvasRenderingContext2D, [x, y, w, h]: [number, number, number, number], cellBorderWidth: number, cellData: ICellData) => {\n\n    ctx2d.beginPath();\n\n    // const r = 'rgb(38, 70, 83)'\n    // const r = 40 - Math.round(4 * Math.random());\n    // const g = 74 - Math.round(7 * Math.random());\n    // const b = 87 - Math.round(8 * Math.random());\n    // const r = 'rgb(61, 64, 91)'\n    // const r = 64 - Math.round(6 * Math.random());\n    // const g = 67 - Math.round(7 * Math.random());\n    // const b = 95 - Math.round(9 * Math.random());\n    // const r = 'rgb(0, 48, 73)'\n    // const r = 0;\n    // const g = 51 - Math.round(5 * Math.random());\n    // const b = 77 - Math.round(7 * Math.random());\n\n    ctx2d.fillStyle = COLORS[Math.floor(5 * Math.random())];\n    ctx2d.rect(x, y, w + cellBorderWidth, h + cellBorderWidth);\n    ctx2d.fill();\n\n    ctx2d.lineWidth = cellBorderWidth;\n    ctx2d.strokeStyle = BorderColors.BASE;\n    ctx2d.stroke();\n\n    ctx2d.font = \"italic 12pt Arial\";\n    ctx2d.fillStyle = '#4fc3f7';\n    ctx2d.fillText(`${cellData.cellNumber.toString()}`, Math.round(x + w * 0.1), Math.round(y + h * 0.5 - 5));\n};\n\nconst drawCellsGrid = (\n    ctx2d: CanvasRenderingContext2D,\n    canvasSize: [number, number],\n    cellsAmount: number,\n    cellWidth: number,\n    cellHeight: number,\n    cellBorderWidth: number\n) => {\n\n    const [width] = canvasSize;\n\n    let dy: number = cellBorderWidth * 0.5;\n    let dx: number = cellBorderWidth * 0.5;\n\n    Array.from(new Array(cellsAmount)).forEach((_empty: any, i: number) => {\n\n        let offsetX = cellBorderWidth;\n        let offsetY = cellBorderWidth;\n\n        if (dx + cellWidth > width) {\n\n            dx = cellBorderWidth * 0.5;\n            dy += cellHeight + offsetY;\n        }\n\n        ((i, ddx, ddy) => drawCell(\n            ctx2d,\n            [ddx, ddy, cellWidth, cellHeight],\n            cellBorderWidth,\n            { cellNumber: i + 1, point: [-1, -1] }\n        ))(i, dx, dy);\n\n        dx += cellWidth + offsetX;\n    });\n};\n\n// TODO: use via hoc maybe\nconst drawCellHovering = (\n    ctx2d: CanvasRenderingContext2D,\n    { point: [pointX, pointY] }: ICellData,\n    _canvasSize: [number, number],\n    [w, h]: [number, number],\n    borderWidth: number,\n    borderColor: BorderColors\n) => {\n\n    const px = borderWidth * 0.5 + (w + borderWidth) * pointX;\n    const py = borderWidth * 0.5 + (h + borderWidth) * pointY;\n\n    ctx2d.beginPath();\n\n    ctx2d.rect(px, py, w + borderWidth, h + borderWidth);\n\n    ctx2d.lineWidth = borderWidth;\n    ctx2d.strokeStyle = borderColor;\n    ctx2d.stroke();\n};\n\nconst drawTileCell = (ctx2d: CanvasRenderingContext2D, tileCell: ITileState, _canvasSize: [number, number], [w, h]: [number, number], borderWidth: number) => {\n    const [pointX, pointY] = tileCell.point;\n\n    const x = borderWidth + (w + borderWidth) * pointX;\n    const y = borderWidth + (h + borderWidth) * pointY;\n\n    ctx2d.beginPath();\n\n    ctx2d.fillStyle = '#37474f';\n    ctx2d.rect(x, y, w, h);\n    ctx2d.fill();\n\n    if (!tileCell.tile.url) return;\n\n    const img = new Image();\n    img.onload = () => {\n\n\n        if (tileCell.tile.boundedTiles.length && tileCell.tile.boundedTiles[0] === tileCell.tile.id) {\n            drawBoundedTilesImage(ctx2d, img, tileCell.tile.boundedTiles.map(t => getPointByCellNumber(t)), [w, h], borderWidth);\n            return;\n        }\n        // const natW = img.naturalWidth;\n        // const natH = img.naturalHeight;\n        // ctx.drawImage(img, 0, 0, natW, natH, x, y, w, h);\n        ctx2d.beginPath();\n        ctx2d.rect(x, y, w, h);\n        ctx2d.fillStyle = '#37474f';\n        ctx2d.fill();\n        ctx2d.drawImage(img, x, y, w, h);\n    };\n    img.src = tileCell.tile.url;\n\n};\n\nconst drawBoundedTilesImage = (\n    ctx2d: CanvasRenderingContext2D,\n    image: HTMLImageElement,\n    boundedCellsCoords: TileCoords[],\n    [w, h]: [number, number],\n    borderWidth: number\n) => {\n\n    const { left, right, bottom, top } = getBoundTilesCorners(boundedCellsCoords);\n\n    const [dx, dy] = [right[0] - left[0] + 1, bottom[1] - top[1] + 1];\n\n    const getCropPoint = getPointByArea(\n        image.width / dx,\n        image.height / dy,\n        -left[0] * image.width / dx,\n        -top[1] * image.height / dy,\n        1 / dx,\n        1 / dy\n    );\n    const getRealPoint = getPointByArea(w, h, 1, 1, 0, 0);\n\n    boundedCellsCoords.forEach(t => {\n        const [cropX, cropY, cropW, cropH] = getCropPoint([t[0], t[1], 1, 1]);\n        const [realX, realY, realW, realH] = getRealPoint([t[0], t[1], 1, 1]);\n        const ofstX = borderWidth * 0.5 + borderWidth * t[0];\n        const ofstY = borderWidth * 0.5 + borderWidth * t[1];\n        ctx2d.drawImage(\n            image,\n            cropX, cropY,\n            cropW, cropH,\n            realX + ofstX, realY + ofstY,\n            realW, realH\n        );\n    });\n\n};\n\nconst CellsGrid = (props: ICellsGridProps) => {\n\n    const { cellW, cellH, cellBorderWidth, amount, canvas2dCtxInList$, event$, canvasSize } = props;\n\n    useEffect(() => {\n        console.log('%c render cells Grid! ', 'border: 1px solid orange;', canvasSize);\n        const sub = canvas2dCtxInList$.subscribe((ctx2dInList) => {\n            ctx2dInList.forEach(ctx2d => {\n                drawCellsGrid(ctx2d, canvasSize, amount, cellW, cellH, cellBorderWidth);\n            });\n        });\n        return () => sub.unsubscribe();\n    }, [cellW, cellH, cellBorderWidth, amount, canvasSize, canvas2dCtxInList$]);\n\n    useEffect(() => {\n        const sub = event$.subscribe((ev) => {\n            const {\n                displayCells: displaying,\n                clearCells: clearing,\n                displayTiles: tilesForDisplay,\n                clearTiles: tilesForClear,\n                highlightCells,\n            } = ev;\n            canvas2dCtxInList$.getValue().forEach(ctx2d => {\n\n                let clearedCellNumberMap: any = {};\n                let displayedMap: any = {};\n                const displayHoverSelectedCells: ICellsGridEvent[] = [];\n\n                tilesForDisplay.forEach(tileCell => {\n                    drawTileCell(ctx2d, tileCell, canvasSize, [cellW, cellH], cellBorderWidth);\n                });\n\n                clearing.forEach(({ cellNumber, point }) => {\n                    const isDisplayedOneLst = displaying.filter((t) => t.mouseType === MyCanvasMouseEvents.Click && t.cellNumber === cellNumber);\n                    // clear previous position!\n                    clearedCellNumberMap[cellNumber] = 1;\n                    if (!isDisplayedOneLst.length) {\n                        drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.BASE);\n                    }\n                });\n                highlightCells.forEach(({ cellNumber, point }) => {\n                    drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.SHOW_FILTERED_TILES);\n                });\n                displaying.forEach((t) => {\n                    const { cellNumber, mouseType, point } = t;\n                    // and then draw new hover position\n                    let color = mouseType === MyCanvasMouseEvents.Click ? BorderColors.SELECTED : BorderColors.HOVERED;\n                    if (displayedMap[cellNumber]) {\n                        // color = BorderColors.HOVER_SELECTED;\n                        displayHoverSelectedCells.push(t);\n                    } else {\n                        drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, color);\n                    }\n                    if (mouseType === MyCanvasMouseEvents.Click) displayedMap[cellNumber] = 2;\n                    if (mouseType === MyCanvasMouseEvents.Move) displayedMap[cellNumber] = 1;\n                });\n                displayHoverSelectedCells.forEach(({ cellNumber, point }) => {\n                    drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.HOVER_SELECTED);\n                });\n            });\n        });\n        return () => sub.unsubscribe();\n    }, [event$, canvas2dCtxInList$, cellW, cellH, cellBorderWidth, canvasSize]);\n\n    return null;\n};\n\nexport default CellsGrid;","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { Subject } from 'rxjs/internal/Subject';\n\nimport ServiceContext from '../../contexts/ServiceContext';\n\nimport CanvasComponent from '../../components/Canvas';\n\nimport CellsGrid, { CellsGridEventData, ICellsGridEvent } from '../../components/CellsGrid';\nimport { getCellByClick } from '../../helpers/canvasMath';\nimport { IEventProps } from '../../helpers/IEventProps';\nimport { ICellData, ICellEventData, ITileState, MyCanvasMouseEvents, MyModes } from '../../interfaces/cells';\nimport { AccountAddr, EMPTY_ADDR, IDataService } from '../../services/interfaces';\n\n\nexport enum CellEventTypes {\n    None = 0,\n    Add = 1,\n    Remove = 2,\n    UpdateByContract = 3,\n    DisplayOwnCells = 4,\n    DisplayOtherCells = 5,\n    DisplayAll = 6,\n    UserUpdateTileGroup = 7\n}\n\nexport type NoneEvent = [CellEventTypes.None, ICellEventData[]];\nexport type AddTileEvent = [CellEventTypes.Add, ICellEventData[]];\nexport type RemoveTileInModifyModeEvent = [CellEventTypes.Remove, ITileState[]];\nexport type UpdateByContractEvent = [CellEventTypes.UpdateByContract, ICellEventData[]];\nexport type DisplayCellsEvent = [CellEventTypes.DisplayOwnCells, ICellEventData[]];\nexport type DisplayOtherEvent = [CellEventTypes.DisplayOtherCells, ICellEventData[]];\nexport type DisplayAllEvent = [CellEventTypes.DisplayAll, ICellEventData[]];\nexport type UserTilesSaveEvent = [CellEventTypes.UserUpdateTileGroup, ITileState[]];\n\nexport type CellsEvent =\n    | NoneEvent\n    | AddTileEvent\n    | RemoveTileInModifyModeEvent\n    | UpdateByContractEvent\n    | DisplayCellsEvent\n    | DisplayOtherEvent\n    | DisplayAllEvent\n    | UserTilesSaveEvent;\n\nexport interface ICellsLayoutProps extends IEventProps<ICellEventData[]> {\n    cellsUpdate$: Subject<CellsEvent>;\n    currentAcc$: BehaviorSubject<AccountAddr>;\n    cellsAmount: number;\n    cellSize: [number, number];\n    cellBorderWidth: number;\n    maxCanvasWidth: number;\n}\n\n\nconst MAP_CURR_CELL_EV_TO_CELL_GRID_EV = (t: ICellEventData, _i: number, _arr: ICellEventData[]): ICellsGridEvent => ({\n    cellNumber: t.curr.cellNumber,\n    point: t.curr.point,\n    mouseType: t.mouseType\n})\n\nconst Component = (props: ICellsLayoutProps) => {\n\n    const { cellSize, cellsAmount, cellBorderWidth, maxCanvasWidth, event$, cellsUpdate$, currentAcc$ } = props;\n\n    // TODO: MODE from props\n    const modeRef = useRef<MyModes>(MyModes.Buy);\n\n    // // TODO: currentAcc from props\n    // const currentAcc$ = useMemo(() => new BehaviorSubject<AccountAddr>('<test-account>' as AccountAddr), []);\n\n\n    const dataService = useContext(ServiceContext) as IDataService;\n\n    const [cellWidth, cellHeight] = cellSize;\n\n    const [sizeWithOuter, setSize] = useState<[number, number, boolean]>([0, 0, false]);\n    const boxRef = useRef<HTMLDivElement | null>(null);\n    const cellsLayoutSizeRef = useRef<[number, number]>([0, 0]);\n    const rowsDataRef = useRef<[number, number]>([0, 0]);\n\n    const filteredCellsRef = useRef<ICellsGridEvent[]>([]);\n\n    const cellTileUpdatesRef = useRef<{ [cellNumber: number]: number }>({});\n\n    const canvas2dCtxInList$ = useMemo(() => new BehaviorSubject<CanvasRenderingContext2D[]>([]), []);\n    const canvasMouseEvent$ = useMemo(() => new Subject<[MyCanvasMouseEvents, React.MouseEvent<HTMLCanvasElement, MouseEvent>]>(), []);\n\n\n    // [cells display] [cells clear] [tiles display] [tiles clear]\n    const cellsGridEvent$ = useMemo(() => new BehaviorSubject<CellsGridEventData>({\n        displayCells: [],\n        clearCells: [],\n        displayTiles: [],\n        clearTiles: [],\n        highlightCells: [],\n        shadeCells: []\n    }), []);\n\n    const contractTiles$ = useMemo(() => new BehaviorSubject<{ [id: number]: [number, ITileState] }>({}), []);\n\n    const [error, setError] = useState<[boolean, string | null]>([false, null]);\n\n    const onBoxRef = useCallback((el: HTMLDivElement | null) => {\n        if (el) {\n            const finalCellWidth = cellWidth;\n            const rectWidth = maxCanvasWidth;\n            // const rectWidth = width <= maxCanvasWidth ? width : maxCanvasWidth;\n            let inRow = Math.floor((rectWidth - cellBorderWidth) / (finalCellWidth + cellBorderWidth));\n            const finalWidth = (inRow + 1) * cellBorderWidth + inRow * finalCellWidth;\n            const rows = Math.ceil(cellsAmount / inRow);\n            const finalHeight = rows * cellHeight + rows * cellBorderWidth + cellBorderWidth;\n            boxRef.current = el;\n            rowsDataRef.current = [inRow, rows];\n            cellsLayoutSizeRef.current = [finalWidth, finalHeight];\n            setSize([\n                finalWidth,\n                finalHeight,\n                true,\n            ]);\n        }\n    }, [boxRef, cellsLayoutSizeRef, rowsDataRef, cellsAmount, cellBorderWidth, maxCanvasWidth, cellWidth, cellHeight]);\n\n    // useEffect(() => {\n    //     const sub = mode$.subscribe(mode => {\n    //     });\n    //     return () => sub.unsubscribe();\n    // }, [mode$]);\n\n    useEffect(() => {\n        // TODO: create async funcs outside, add it with mapping (like react-connect)\n        // 1. connect\n        // 2. start timer (5s asking smart-contract)\n        // 3. every count: get items (tiles)\n        // 4. compare items from service with items of state\n        // 5. new\\updated items display!\n        const sub = dataService.getState().subscribe(val => {\n            console.log('new state', { ...val });\n\n            const cellEvents = event$.getValue();\n\n            const updatesRef = cellTileUpdatesRef.current;\n            // TODO: too complex\n            const cellEventOfIndex = cellEvents.reduce((acc, t, i) => ({ ...acc, [t.curr.cellNumber]: i }), {} as { [id: number]: number });\n            const contractTilesData: { [id: number]: [number, ITileState]; } = {};\n            let isUpdateNeeds = false;\n\n            const displayingUpdatedTiles: ITileState[] = [];\n\n            val.tileCells.forEach(tileData => {\n                // new \\ updated Tile\n                contractTilesData[tileData.cellNumber] = [val.lastUpdate, { ...tileData }];\n                if (!updatesRef[tileData.cellNumber] || updatesRef[tileData.cellNumber] < tileData.tile.version + 1) {\n                    console.log('tile', tileData, cellEventOfIndex, [...cellEvents]);\n                    console.log('contractTilesData:cellNumber', tileData.cellNumber, tileData.tile.version, contractTilesData[tileData.cellNumber]);\n                    updatesRef[tileData.cellNumber] = tileData.tile.version + 1;\n                    displayingUpdatedTiles.push({ ...tileData });\n                    if (cellEventOfIndex[tileData.cellNumber] > 0) {\n                        // cellEventsRef[cellEventOfIndex[tile.cellNumber]].contractTile = { ...tile.tile };\n                        isUpdateNeeds = true;\n                    }\n                }\n            });\n\n            if (isUpdateNeeds) {\n                cellsUpdate$.next([CellEventTypes.UpdateByContract, [...cellEvents]]);\n            }\n\n            // TODO: use [ Map<CellNumber, ITileState>, ITileState[] ] as [ aTilesMap, tilesForUpdate ]\n            contractTiles$.next({ ...contractTilesData });\n\n            // const cellEvents = event$.getValue().map<ICellEventData>(t => {\n            //     // const tile = val.tileCells\n            // });\n\n            let highlights: ICellsGridEvent[] = [];\n\n            if (modeRef.current === MyModes.Edit) {\n                highlights = val.tileCells\n                    .filter(t => t.tile && t.tile.owner === dataService.getAccount())\n                    .map<ICellsGridEvent>(t => ({\n                        cellNumber: t.cellNumber,\n                        mouseType: MyCanvasMouseEvents.None,\n                        point: t.point\n                    }));\n\n                filteredCellsRef.current = [...highlights];\n            }\n\n            // display updated tiles\n            cellsGridEvent$.next({\n                displayCells: [],\n                clearCells: [],\n                displayTiles: [...displayingUpdatedTiles],\n                // displayTiles: [...val.tileCells],\n                clearTiles: [],\n                highlightCells: [...highlights],\n                shadeCells: []\n            });\n        });\n        return () => sub.unsubscribe();\n    }, [dataService, cellsGridEvent$, event$, filteredCellsRef, cellsUpdate$, contractTiles$, cellTileUpdatesRef, modeRef]);\n\n    useEffect(() => {\n        const sub = cellsUpdate$.subscribe((ev) => {\n            const evType = ev[0], payload = ev[1];\n            console.log('cellsUpdate$', evType, payload);\n\n            const cellEvents = event$.getValue();\n            if (evType === CellEventTypes.DisplayAll || evType === CellEventTypes.DisplayOwnCells) {\n                const unhighlightCells = evType === CellEventTypes.DisplayAll ? [...filteredCellsRef.current] : [];\n                modeRef.current = evType === CellEventTypes.DisplayAll ? MyModes.Buy : MyModes.Edit;\n                filteredCellsRef.current = (ev[1] as ICellEventData[]).map<ICellsGridEvent>(t => ({\n                    cellNumber: t.curr.cellNumber,\n                    point: t.curr.point,\n                    mouseType: MyCanvasMouseEvents.None\n                }));\n                const notHighlightedSelected = cellEvents\n                    .filter(t => t.mouseType === MyCanvasMouseEvents.Click\n                        && unhighlightCells.findIndex(x => x.cellNumber === t.curr.cellNumber) < 0)\n                    .map<ICellsGridEvent>(t => ({\n                        cellNumber: t.curr.cellNumber,\n                        point: t.curr.point,\n                        mouseType: t.mouseType\n                    }));\n                event$.next(cellEvents.filter(t => t.mouseType !== MyCanvasMouseEvents.Click));\n                // 1. display border of selected!\n                return cellsGridEvent$.next({\n                    displayCells: [], clearCells: [...unhighlightCells, ...notHighlightedSelected],\n                    displayTiles: [], clearTiles: [],\n                    highlightCells: [...filteredCellsRef.current],\n                    shadeCells: []\n                });\n            }\n\n            // TODO: update from contract event\n            if (evType === CellEventTypes.UpdateByContract) {\n                return;\n            }\n\n            if (evType === CellEventTypes.Remove) {\n\n                const afterRemoveCellEvents = cellEvents\n                    .filter(t => t.mouseType !== MyCanvasMouseEvents.Click || ev[1].findIndex(x => x.cellNumber === t.curr.cellNumber) < 0);\n\n\n                event$.next([...afterRemoveCellEvents]);\n\n                cellsGridEvent$.next({\n                    displayCells: afterRemoveCellEvents.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\n                    clearCells: ev[1].map<ICellsGridEvent>(t => ({ cellNumber: t.cellNumber, point: t.point, mouseType: MyCanvasMouseEvents.Click })),\n                    displayTiles: [],\n                    clearTiles: [],\n                    highlightCells: [],\n                    shadeCells: []\n                });\n\n                return;\n            }\n\n            // const afterRemoveCellEvents = cellEvents\n            //     .filter(t => t.mouseType !== MyCanvasMouseEvents.Click || payload.findIndex(x => x.curr.cellNumber === t.curr.cellNumber) < 0);\n\n\n            // event$.next([...afterRemoveCellEvents]);\n\n            // cellsGridEvent$.next({\n            //     displayCells: afterRemoveCellEvents.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\n            //     clearCells: payload.map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\n            //     displayTiles: [],\n            //     clearTiles: [],\n            //     highlightCells: [],\n            //     shadeCells: []\n            // });\n        });\n        return () => sub.unsubscribe();\n    }, [cellsUpdate$, event$, cellsGridEvent$, modeRef, filteredCellsRef]);\n\n    useEffect(\n        () => {\n\n            const sub = canvasMouseEvent$.subscribe(([evType, elem]) => {\n                const { clientX, clientY } = elem;\n                const { offsetLeft, offsetTop } = elem.currentTarget;\n\n                const [scrollLeft, scrollTop] = boxRef.current ? [boxRef.current.scrollLeft, boxRef.current.scrollTop] : [0, 0];\n\n                const cellEvents = event$.getValue();\n\n                // mouse out of grid layout\n                if ((clientX - offsetLeft + scrollLeft + cellBorderWidth >= cellsLayoutSizeRef.current[0]) ||\n                    (clientX <= offsetLeft) ||\n                    (clientY <= offsetTop) ||\n                    (clientY - offsetTop + scrollTop + cellBorderWidth >= cellsLayoutSizeRef.current[1])) {\n                    const selectedCellEvents = cellEvents.filter(t => t.mouseType !== MyCanvasMouseEvents.Move);\n                    cellsGridEvent$.next({\n                        displayCells: selectedCellEvents.map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\n                        clearCells: cellEvents\n                            .filter(t =>\n                                t.mouseType === MyCanvasMouseEvents.Move\n                                && filteredCellsRef.current.findIndex(ft => ft.cellNumber === t.curr.cellNumber) < 0\n                            )\n                            .map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\n                        displayTiles: [],\n                        clearTiles: [],\n                        highlightCells: [...filteredCellsRef.current],\n                        shadeCells: []\n                    });\n                    event$.next([...selectedCellEvents]);\n                    return;\n                }\n\n                const cellData = getCellByClick(\n                    clientX + scrollLeft - offsetLeft,\n                    clientY + scrollTop - offsetTop,\n                    { inRowCount: rowsDataRef.current[0], cellW: cellWidth + cellBorderWidth, cellH: cellHeight + cellBorderWidth }\n                );\n\n                const newCellData: ICellData = { cellNumber: cellData.cellNumber, point: [cellData.x, cellData.y] };\n\n\n                if (evType === MyCanvasMouseEvents.Move && !!cellEvents.find(t => t.mouseType === evType && t.curr.cellNumber === cellData.cellNumber)) {\n                    return;\n                }\n\n                // console.log('\\n\\n-----');\n                // console.log('cellEvents', [...cellEvents]);\n                // console.log('----- cellData -- ', cellData);\n\n                // 1        move to new cell (clear last, display new Hover)\n                // 2        click new cell (display new selected)\n                // 3        click on selected (clear selected, display hover)\n                // 4        move to selected (display Selected-Hover)\n                // 5        move on the same (no action)\n                // 6*        move Out (clear last --- ok)\n                //  remove from EVENT:  [ click twice on the same ]\n\n                const MODE = modeRef.current;\n                const CURRENT_ADDR = currentAcc$.getValue();\n                const contractTiles = contractTiles$.getValue();\n\n                let CLICK_TO_NEW_CELL = evType === MyCanvasMouseEvents.Click;\n                let ADD_NEW_MOVE_CELL = cellEvents.length && evType === MyCanvasMouseEvents.Move;\n\n                const EDIT_NOT_MINE_TILE_OE_EMPTY = MODE === MyModes.Edit && CLICK_TO_NEW_CELL &&\n                    (!contractTiles[newCellData.cellNumber] || contractTiles[newCellData.cellNumber][1].tile.owner !== CURRENT_ADDR);\n\n                if (EDIT_NOT_MINE_TILE_OE_EMPTY) CLICK_TO_NEW_CELL = false;\n                const result: { display: ICellsGridEvent[], clear: ICellsGridEvent[], finalCellEvents: ICellEventData[] } = {\n                    display: !cellEvents.length && !EDIT_NOT_MINE_TILE_OE_EMPTY ? [{ ...newCellData, mouseType: evType }] : [],\n                    clear: [],\n                    finalCellEvents: !cellEvents.length && !EDIT_NOT_MINE_TILE_OE_EMPTY ? [{ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } }] : []\n                };\n\n\n                cellEvents.forEach(t => {\n\n                    if (evType === MyCanvasMouseEvents.Click) {\n                        // console.log('%c cell event', 'background-color: darkcyan; color: white', t);\n                        // if MODE is EDIT and cell is not mine - skip!\n                        // if MODE is BUY and cell is mine - skip!\n                        // all above - if CURRENT_ADDR is not EMPTY\n                        // console.log('%c ev ', 'color: green', t, contractTiles[t.curr.cellNumber], CURRENT_ADDR);\n\n                        // click to new cell that is not mine or empty in EDIT MODE\n                        if (MODE === MyModes.Edit && t.mouseType === MyCanvasMouseEvents.Click && (!contractTiles[t.curr.cellNumber] || contractTiles[t.curr.cellNumber][1].tile.owner !== CURRENT_ADDR)) {\n                            CLICK_TO_NEW_CELL = false;\n                            return;\n                        }\n                        // click on another cell: display selected owned tiles!\n                        if (MODE === MyModes.Edit && t.mouseType === MyCanvasMouseEvents.Click && !EDIT_NOT_MINE_TILE_OE_EMPTY) {\n                            if (t.curr.cellNumber !== newCellData.cellNumber) {\n                                result.display.push({ ...t.curr, mouseType: t.mouseType });\n                            }\n                        }\n                        // TODO: click for BUYING on empty cell - is OK (yet)\n                        // console.log('t.contractTile is buy', t.curr.cellNumber);\n                        // console.log('t.contractTile is CURRENT_ADDR', CURRENT_ADDR, contractTiles[t.curr.cellNumber]);\n                        // console.log('t.contractTile is owner', contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner);\n                        // console.log('t.contractTile is owner == myAddr', contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner === CURRENT_ADDR);\n                        if (MODE === MyModes.Buy && t.mouseType === MyCanvasMouseEvents.Click && contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner === CURRENT_ADDR) {\n                            return;\n                        }\n\n                        if (MODE === MyModes.Buy) {\n                            // click on new [ NON-EDIT mode ] \n                            // - ignore selected (only one selected is allowed)\n                            if (t.curr.cellNumber !== newCellData.cellNumber) {\n                                result.clear.push({ ...t.curr, mouseType: evType });\n                                return;\n                            }\n                        }\n\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType === evType) {\n                            CLICK_TO_NEW_CELL = false;\n                            // 3:  click on selected (clear selected, display hover)\n                            result.clear.push({ ...t.curr, mouseType: evType });\n                            // no display hover (click on hover Code [3*] do that)\n                            return;\n                        }\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType !== evType) {\n                            // 3*   click on hovered (display move cell)\n                            result.display.push({ ...newCellData, mouseType: MyCanvasMouseEvents.Move });\n                        }\n                        result.finalCellEvents.push({ ...t });\n                    }\n                    if (evType === MyCanvasMouseEvents.Move) {\n                        if (t.mouseType === evType && t.curr.cellNumber === newCellData.cellNumber) {\n                            ADD_NEW_MOVE_CELL = false;\n                            // 5:  move on the same (no display, no clear)\n                            result.finalCellEvents.push({ ...t });\n                            return;\n                        }\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType === MyCanvasMouseEvents.Click) {\n                            // 4:  move to selected (display Selected-Hover)\n                            result.finalCellEvents.push({ ...t });\n                            result.display.push({ ...t.curr, mouseType: t.mouseType });\n                            return;\n                        }\n                        if (t.mouseType === evType && t.curr.cellNumber !== newCellData.cellNumber) {\n                            ADD_NEW_MOVE_CELL = false;\n                            // 1:  move to new cell (clear last, display new Hover)\n                            //     move to new cell\n                            result.clear.push({ ...t.curr, mouseType: evType });\n                            result.finalCellEvents.push({ mouseType: t.mouseType, lastCell: { ...t.curr }, curr: { ...newCellData } });\n                            //     display new Hover\n                            result.display.push({ ...newCellData, mouseType: evType });\n                            return;\n                        }\n                        result.finalCellEvents.push({ ...t });\n                        result.display.push({ ...t.curr, mouseType: t.mouseType });\n                    }\n                });\n\n                if (ADD_NEW_MOVE_CELL) {\n                    // move on new cell first time\n                    result.finalCellEvents.push({ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } });\n                    result.display.push({ ...newCellData, mouseType: evType });\n                }\n                if (CLICK_TO_NEW_CELL) {\n                    // 2:  click new cell (display new selected)\n                    if (MODE === MyModes.Buy && contractTiles[newCellData.cellNumber] && contractTiles[newCellData.cellNumber][1].tile.owner === CURRENT_ADDR) {\n                        return;\n                    }\n                    result.finalCellEvents.push({ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } });\n                    result.display.push({ ...newCellData, mouseType: evType });\n                }\n                if (evType === MyCanvasMouseEvents.Click) {\n                    if (EDIT_NOT_MINE_TILE_OE_EMPTY) {\n                        result.finalCellEvents = result.finalCellEvents.filter(\n                            t => t.mouseType !== MyCanvasMouseEvents.Click\n                        );\n                    }\n                    console.log('final res', CLICK_TO_NEW_CELL, { ...result });\n                }\n                if (result.display.length || result.clear.length) {\n                    cellsGridEvent$.next({\n                        displayCells: [...result.display],\n                        clearCells: result.clear.filter(t => filteredCellsRef.current.findIndex(ft => ft.cellNumber === t.cellNumber) < 0),\n                        displayTiles: [],\n                        clearTiles: [],\n                        highlightCells: filteredCellsRef.current.filter(t => result.display.findIndex(ct => ct.cellNumber === t.cellNumber) < 0),\n                        shadeCells: []\n                    });\n                }\n                if (evType === MyCanvasMouseEvents.Click) {\n                    console.log('\\nresult', { ...result });\n                }\n                event$.next([...result.finalCellEvents]);\n            });\n\n            return () => sub.unsubscribe();\n\n        },\n        [\n            boxRef,\n            cellsLayoutSizeRef,\n            rowsDataRef,\n            event$,\n            modeRef,\n            contractTiles$,\n            currentAcc$,\n            cellsGridEvent$,\n            canvasMouseEvent$,\n            filteredCellsRef,\n            cellBorderWidth,\n            cellWidth,\n            cellHeight\n        ]\n    );\n\n    return (\n        <div id=\"cells-body\" className=\"overflow\" ref={ onBoxRef }>\n            <CanvasComponent\n                width={ sizeWithOuter[0] }\n                height={ sizeWithOuter[1] }\n                canvas2dCtxInList$={ canvas2dCtxInList$ }\n                event$={ canvasMouseEvent$ }\n            />\n            {\n                sizeWithOuter[0] &&\n                sizeWithOuter[1] &&\n                <CellsGrid\n                    event$={ cellsGridEvent$ }\n                    canvas2dCtxInList$={ canvas2dCtxInList$ }\n                    amount={ cellsAmount }\n                    cellW={ cellSize[0] }\n                    cellH={ cellSize[1] }\n                    cellBorderWidth={ cellBorderWidth }\n                    canvasSize={ [sizeWithOuter[0], sizeWithOuter[1]] }\n                />\n            }\n        </div>\n    )\n};\n\nexport default Component;","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { BehaviorSubject } from 'rxjs';\nimport { Subject } from 'rxjs/internal/Subject';\nimport Button from '../../components/Button';\nimport Input from '../../components/Input';\nimport Modal from '../../components/Modal';\nimport { CartEvents, TilesEventCart, ICellEventData, IUnmintedTileState } from '../../interfaces/cells';\nimport { ContractTileInfo, FormTileData } from '../../services/interfaces';\n\nexport interface ICartModalProps {\n    event$: Subject<TilesEventCart>;\n}\n\nenum CartOpenTypes {\n    None = 0,\n    BuyCellsMode = 1,\n    ModifyCellsMode = 2,\n}\n\ntype StateWithOpenVariant = [true, ICellEventData[]];\ntype StateWithCloseVariant = [false];\ntype StateWithOpenStatus = StateWithOpenVariant | StateWithCloseVariant;\n\nconst CartModal = (props: ICartModalProps) => {\n    const { event$ } = props;\n    const modalEvent$ = useMemo(() => new Subject(), []);\n    const remove$ = useMemo(() => new Subject<IUnmintedTileState>(), []);\n    const cartEvent$ = useMemo(() => new Subject<TilesEventCart>(), []);\n\n    const [tilesState, setTilesState] = useState<[CartOpenTypes, IUnmintedTileState[]]>([CartOpenTypes.None, []]);\n    const tilesRef = useRef<IUnmintedTileState[]>([]);\n\n    const groupAvatarUrl = tilesState[1].reduce<string>((acc, t) => {\n        if (!t.tile) return acc;\n        if (acc && t.tile.url) return '';\n        return t.tile.url || acc;\n    }, '');\n\n    const input$ = useMemo(() => new BehaviorSubject<[string, keyof FormTileData | null]>([groupAvatarUrl || '', null]), [groupAvatarUrl]);\n    const inputDataRef = useRef<Partial<FormTileData>>({});\n\n    useEffect(() => {\n        const sub = input$.subscribe(([val, key]) => {\n            if (key) {\n                inputDataRef.current[key] = val;\n            }\n        });\n        return () => sub.unsubscribe();\n    }, [input$, inputDataRef]);\n\n    // const [state, setState] = useState<StateWithOpenStatus>([false]);\n    // const stateRef = useRef<ICellEventData[]>(state[1] || []);\n    useEffect(() => {\n        const launcherSub = event$.subscribe(val => {\n            console.log('%c event$ in cart-modal: ', 'border: 1px solid green', val, input$.getValue());\n            // if (val.type === CartEvents.Open) {\n            //     stateRef.current = [...val.payload];\n            //     setState([true, [...val.payload]]);\n            //     setTilesState([false, []]);\n            // }\n            if (val.type === CartEvents.Modify || val.type === CartEvents.Open) {\n                input$.next(['', null]);\n                tilesRef.current = [...val.payload];\n                setTilesState([val.type === CartEvents.Modify ? CartOpenTypes.ModifyCellsMode : CartOpenTypes.BuyCellsMode, [...val.payload]]);\n                cartEvent$.next(val);\n            }\n        });\n        const sub = cartEvent$.subscribe((val) => {\n            console.log('cart event', val, [...tilesRef.current]);\n            if ([CartEvents.Close, CartEvents.Save, CartEvents.Buy].includes(val.type)) {\n                if (val.type === CartEvents.Buy) {\n                    if (tilesRef.current.length) {\n                        event$.next({\n                            type: CartEvents.Buy,\n                            params: inputDataRef.current && { ...inputDataRef.current },\n                            payload: tilesRef.current.map(t => ({ ...t })),\n                            groupUrl: input$.getValue()[0]\n                        });\n                    }\n                } else if (val.type === CartEvents.Save) {\n                    if (tilesRef.current.length) {\n                        const inputData = inputDataRef.current;\n                        event$.next({\n                            type: CartEvents.SaveTiles,\n                            payload: [...tilesRef.current],\n                            groupUrl: inputData ? inputData.url || '' : '', //input$.getValue()[0],\n                            params: inputData && { ...inputData }\n                        });\n                    } else {\n                        event$.next({ ...val });\n                    }\n                }\n                tilesRef.current = [];\n                input$.next(['', null]);\n                setTilesState([CartOpenTypes.None, []]);\n            }\n\n            if (val.type === CartEvents.RemoveItems) {\n                tilesRef.current = tilesRef.current.filter(t => val.payload.findIndex(x => x.cellNumber === t.cellNumber) < 0);\n                setTilesState([CartOpenTypes.ModifyCellsMode, [...tilesRef.current]]);\n                event$.next(val);\n            }\n        });\n        return () => {\n            launcherSub.unsubscribe();\n            sub.unsubscribe();\n        };\n    }, [event$, modalEvent$, tilesRef, input$, inputDataRef]);\n\n    useEffect(() => {\n        const sub = remove$.subscribe((val) => {\n            console.log('remove >', val);\n            cartEvent$.next({ type: CartEvents.RemoveItems, payload: [{ ...val }], groupUrl: '' });\n        });\n        return () => sub.unsubscribe();\n    }, [event$, remove$]);\n\n    console.log('state CartModal: ', tilesState);\n\n    return (\n        <div>\n            {\n                <Modal title=\"Crypto tiles\" width={ 770 } height={ 450 } event$={ cartEvent$ } open={ tilesState[0] !== CartOpenTypes.None }>\n                    <div className=\"flex-cnt item wrap content-start overflow px-2\">\n                        {\n                            tilesState[0] === CartOpenTypes.ModifyCellsMode\n                            && tilesState[1].length > 1\n                            && <div className=\"flex-cnt item wrap fb-10 px-2 my-2\">\n                                <Button color=\"secondary\" noActive title={ tilesState[1].length > 1 ? 'group url' : \"url\" } small />\n                                <Input event$={ input$ } action=\"url\" value={ groupAvatarUrl } />\n                            </div>\n                        }\n                        <div className=\"flex-cnt item justify-start fb-10 wrap px-2 py-3\">\n                            {\n                                tilesState[0] === CartOpenTypes.ModifyCellsMode && tilesState[1].length > 1 && <div className=\"flex-cnt item fb-10 my-2\">\n                                    <Button color=\"secondary\" noActive title=\"group tiles\" small />\n                                </div>\n                            }\n                            {\n                                tilesState[0] === CartOpenTypes.ModifyCellsMode\n                                && tilesState[1].length > 1\n                                && tilesState[1].map(cellData =>\n                                    <div\n                                        key={ cellData.cellNumber }\n                                        className=\"flex-cnt item wrap fb-2 align-center shrink mx-1 px-3 py-1\"\n                                        style={ { marginBottom: 8, backgroundColor: 'white' } }\n                                    >\n                                        <div className=\"flex-cnt item fb-4 modal_cell-item\">{ cellData.cellNumber + 1 }</div>\n                                        <div className=\"flex-cnt item fb-3 justify-end\">\n                                            <Button action={ cellData } light color=\"error\" title=\"X\" small event$={ remove$ } />\n                                        </div>\n                                    </div>\n                                )\n                            }\n                            {\n                                (tilesState[0] === CartOpenTypes.BuyCellsMode\n                                    || (tilesState[0] === CartOpenTypes.ModifyCellsMode && tilesState[1].length === 1))\n                                && <div className=\"flex-cnt item wrap justify-start fb-10\">\n                                    {\n                                        tilesState[1].map(cellData =>\n                                            <div\n                                                key={ cellData.cellNumber }\n                                                className=\"flex-cnt item wrap fb-10 align-center shrink mx-1 px-3 py-1\"\n                                                style={ { marginBottom: 8, backgroundColor: 'white' } }\n                                            >\n                                                <div className=\"flex-cnt item fb-4 shrink\">\n                                                    <Button color=\"header\" textAlign=\"left\" noActive title=\"price (Eth)\" small />\n                                                </div>\n                                                <div className=\"flex-cnt item justify-end fb-4\">\n                                                    <Button color=\"info\" noActive title={ `# ${cellData.cellNumber + 1}` } small />\n                                                </div>\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\n                                                    <Input color=\"header\" event$={ input$ } action=\"price\" value={ cellData.token ? '' + cellData.token.price : '' } />\n                                                </div>\n                                                <div className=\"flex-cnt item fb-4 shrink\">\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"image url\" small />\n                                                </div>\n                                                <div className=\"flex-cnt item fb-10 mt-1 mb-4\">\n                                                    <Input event$={ input$ } action=\"url\" value={ cellData.tile ? cellData.tile.url || '' : '' } />\n                                                </div>\n                                                <div className=\"flex-cnt item fb-4 shrink\">\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"title\" small />\n                                                </div>\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\n                                                    <Input event$={ input$ } action=\"title\" color=\"header\" value={ cellData.tile ? '' + cellData.tile.title : '' } />\n                                                </div>\n                                                <div className=\"flex-cnt item fb-4 shrink\">\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"bounded tiles\" small />\n                                                </div>\n                                                <div className=\"flex-cnt item shrink fb-10 wrap\">\n                                                    {\n                                                        cellData.tile &&\n                                                        cellData.tile.boundedTiles.map(x =>\n                                                            <div key={ x.toString() } className=\"flex-cnt item shrink my-1 mx-2\">\n                                                                <Button color=\"base\" noActive title={ x.toString() } small />\n                                                            </div>\n                                                        )\n                                                    }\n                                                </div>\n                                                <div className=\"flex-cnt item fb-4 mt-4 shrink\">\n                                                    <Button color=\"close\" textAlign=\"center\" noActive title=\"owner address\" small />\n                                                </div>\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\n                                                    <Input noActive color=\"header\" value={ cellData.tile ? '' + cellData.tile.owner : '' } />\n                                                </div>\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </Modal>\n            }\n        </div>\n    );\n};\n\nexport default CartModal;","import CellsLayout from './CellsLayout';\n\nexport default CellsLayout;","import React, { PropsWithChildren, useCallback, useState } from 'react';\nimport { Subject } from 'rxjs/internal/Subject';\n\n\nexport interface IInputProps<T = any> {\n    title?: string;\n    value?: string;\n    action?: T;\n    noActive?: boolean;\n    light?: boolean;\n    small?: boolean;\n    color?: 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close';\n    event$?: Subject<[string, T]>;\n}\n\nconst Input = (props: PropsWithChildren<IInputProps>) => {\n    const { value, event$, noActive, light, small, color, action } = props;\n    const [state, setState] = useState(value || '');\n    const onChangeHandler = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\n        setState(event.currentTarget.value);\n        event$ && event$.next([event.currentTarget.value, action]);\n    }, [event$, action]);\n\n    const modifiersTxt = [noActive && 'no-action', light && 'light', small && 'small', color].filter(Boolean).map(t => `text-input--${t}`);\n    return (\n        <div className={ ['text-input', ...modifiersTxt].join(' ') }>\n            <input type=\"text\" value={ state } onChange={ onChangeHandler } disabled={ noActive } />\n        </div>\n    );\n};\n\nexport default Input;","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { CartEvents, TilesEventCart } from '../interfaces/cells';\nimport Button from './Button';\n\n\nexport interface IModalProps {\n    title: string;\n    width: number;\n    height: number;\n    event$: Subject<TilesEventCart>;\n    open: boolean;\n}\n\nconst Modal = (props: PropsWithChildren<IModalProps>) => {\n    const { title, width, height, event$, open } = props;\n    const [state, setState] = useState<TilesEventCart>({ type: CartEvents.Close, payload: [], groupUrl: '' });\n    useEffect(() => {\n        console.log('useEffect in modal....');\n        const sub = event$.subscribe(ev => {\n            console.log('ev in modal: ', ev);\n            if ([CartEvents.Modify, CartEvents.Open].includes(ev.type)) setState(ev);\n        });\n        return () => sub.unsubscribe();\n    }, [event$]);\n\n    console.log('Modal state', state);\n\n    if (!open) return null;\n\n    const ifNewCell = !!state.payload.filter(t => !t.token && !t.tile).length;\n    let BTN_TITLE = state && state.type === CartEvents.Modify ? \"Save\" : \"Buy\";\n    BTN_TITLE = state && state.type === CartEvents.Open ? \"Buy\" : BTN_TITLE;\n    BTN_TITLE = ifNewCell ? 'Mint' : BTN_TITLE;\n\n    const EV_NAME = state && state.type === CartEvents.Open || ifNewCell ? CartEvents.Buy : CartEvents.Save;\n\n    return (\n        <div id=\"modal-overlay-cnt\">\n            <div id=\"modal-cnt\" style={ { width, height, top: '25%', marginLeft: -0.5 * width } }>\n                <div className=\"header\">\n                    <Button light color=\"header\" noActive title={ title } />\n                    <div className=\"flex-cnt\">\n                        <Button\n                            event$={ event$ }\n                            action={ { type: EV_NAME, payload: [] } }\n                            light\n                            color=\"active\"\n                            title={ BTN_TITLE } />\n                        <div className=\"flex-cnt item mx-1\"></div>\n                        <Button\n                            event$={ event$ }\n                            action={ { type: CartEvents.Close, payload: [] } }\n                            light\n                            color=\"close\"\n                            title=\"Close\" />\n                    </div>\n                </div>\n                <div className=\"content\">{ props.children }</div>\n                <div className=\"footer\"></div>\n            </div>\n        </div>\n    );\n};\n\nexport default Modal;","export default {\n    apiKey: \"AIzaSyD8Ad1yitALcRL8lBafsDVB3cqWXl4r0hY\",\n    authDomain: \"tiles-c734c.firebaseapp.com\",\n    projectId: \"tiles-c734c\",\n    storageBucket: \"tiles-c734c.appspot.com\",\n    messagingSenderId: \"895094851367\",\n    appId: \"1:895094851367:web:e231bfb9953e7edc350b02\"\n};","import { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\nimport { ITileState, IUnmintedTileState } from \"../interfaces/cells\";\n\nexport type AccountAddr = string & { _TYPE_: \"AccountAddr\" };\nexport type ContractTokenID = number & { _TYPE_: \"ContractTokenID\" };\nexport type ContractTileID = number & { _TYPE_: \"ContractTileID\" };\n\nexport const EMPTY_ADDR = \"<no-account>\" as AccountAddr;\n\n\nexport type FormTileData = {\n    title: string;\n    price: string;\n    url: string;\n    description: string;\n};\n\nexport type ContractTileInfo = {\n    _id: any;\n    id: ContractTileID;\n    owner: AccountAddr;\n    tokenId: ContractTokenID;\n    url: string;\n    title: string;\n    version: number;\n    boundedTiles: ContractTileID[];\n};\n\nexport type ContractTokenInfo = {\n    _id: any;\n    id: ContractTokenID;\n    owner: AccountAddr;\n    price: string;\n    url?: string;\n};\n\nexport type DataServiceState = {\n    tileCells: ITileState[];\n    lastUpdate: number;\n}\n\nexport interface IDataService {\n    connect(): Promise<boolean>;\n    getState(): BehaviorSubject<DataServiceState>;\n    getAccount(): AccountAddr | null;\n    getTileInfo(id: ContractTileID): Promise<ContractTileInfo | undefined>;\n    fetchTokenInfo(id: ContractTokenID): Promise<ContractTokenInfo>;\n    fetchTiles(): Promise<ContractTileInfo[]>;\n    groupTiles(tiles: ITileState[], tileData: Partial<FormTileData>): Promise<[boolean, string]>;\n    buyTiles(tiles: ITileState[], tileData: Partial<FormTileData>): Promise<[boolean, string]>;\n    mintTiles(tiles: IUnmintedTileState[], tileData: Partial<FormTileData>): Promise<[boolean, string]>;\n}","import { getPointByCellNumber } from \"../helpers/canvasMath\";\nimport { ITileState } from \"../interfaces/cells\";\nimport { ContractTileInfo, ContractTokenInfo } from \"./interfaces\";\n\nexport const fromContractTile = (tile: ContractTileInfo, token: ContractTokenInfo): ITileState => {\n    return {\n        tile,\n        token,\n        cellNumber: tile.id,\n        point: getPointByCellNumber(tile.id)\n    }\n};","import { FirebaseApp, initializeApp } from \"firebase/app\";\nimport {\n    getFirestore,\n    collection,\n    getDocs,\n    getDoc,\n    updateDoc,\n    addDoc,\n    Firestore,\n    CollectionReference,\n    doc,\n    query,\n    where,\n    QuerySnapshot,\n    DocumentData,\n} from 'firebase/firestore/lite';\nimport testFirebaseConfig from './testDbConfig';\n\nimport { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\nimport { ITileState, IUnmintedTileState } from \"../interfaces/cells\";\nimport {\n    AccountAddr,\n    ContractTileID,\n    ContractTileInfo,\n    ContractTokenID,\n    ContractTokenInfo,\n    DataServiceState,\n    EMPTY_ADDR,\n    FormTileData,\n    IDataService\n} from \"./interfaces\";\nimport { fromContractTile } from \"./mappers\";\n\nconst TEST_OWNER_ADDR = \"test-owner-1\" as AccountAddr;\n\nconst ERROR_TOKEN: ContractTokenInfo = {\n    _id: 1,\n    id: -1 as ContractTokenID,\n    owner: EMPTY_ADDR,\n    price: '',\n    url: ''\n};\n\nconst tileToFirebaseMapper = (item: ContractTileInfo): any => {\n    const idPart = item._id ? { _id: item._id } : {};\n    return {\n        ...idPart,\n        id: '' + item.id,\n        owner: item.owner,\n        tokenId: '' + item.tokenId,\n        title: item.title,\n        url: item.url,\n        version: item.version || 0,\n        boundedTiles: item.boundedTiles ? item.boundedTiles.map(t => '' + t).join(',') : ''\n    };\n};\n\nconst tileFirebaseMapper = (item: any): ContractTileInfo => {\n    return {\n        _id: item._id,\n        version: item.version || 0,\n        id: (Number(item.id)) as ContractTileID,\n        owner: item.owner,\n        tokenId: (Number(item.tokenId)) as ContractTokenID,\n        title: item.title,\n        url: item.url,\n        boundedTiles: item.boundedTiles ? ('' + item.boundedTiles).split(',').map(t => (Number(t)) as ContractTileID) : []\n    };\n};\n\nconst tokenFirebaseMapper = (item: any): ContractTokenInfo => {\n    return {\n        _id: item._id,\n        id: (Number(item.id)) as ContractTokenID,\n        owner: '' as AccountAddr,\n        price: item.price,\n        url: ''\n    };\n};\n\nconst tokenToFirebaseMapper = (item: ContractTokenInfo): any => {\n    const idPart = item._id ? { _id: item._id } : {};\n    return {\n        ...idPart,\n        id: (Number(item.id)) as ContractTokenID,\n        owner: '' as AccountAddr,\n        price: item.price,\n        url: ''\n    };\n};\n\nexport default class DataService implements IDataService {\n    private _account: AccountAddr | null = null;\n    private _state: BehaviorSubject<DataServiceState> = new BehaviorSubject<DataServiceState>({\n        lastUpdate: 0,\n        tileCells: []\n    });\n    private _firebaseApp: FirebaseApp;\n    private _db: Firestore;\n    private _tilesCollection: CollectionReference;\n    private _tokensCollection: CollectionReference;\n    constructor() {\n        this._firebaseApp = initializeApp(testFirebaseConfig);\n        this._db = getFirestore(this._firebaseApp);\n        this._tilesCollection = collection(this._db, 'tiles');\n        this._tokensCollection = collection(this._db, 'tokens');\n    }\n    getState(): BehaviorSubject<DataServiceState> {\n        return this._state;\n    }\n    connect(): Promise<boolean> {\n        this._account = TEST_OWNER_ADDR;\n        return new Promise(resolve => setTimeout(() => resolve(true), 2000));\n    }\n    getAccount(): AccountAddr | null {\n        return this._account;\n    }\n    async getTileInfo(id: ContractTileID): Promise<ContractTileInfo | undefined> {\n        try {\n            const result = await getDoc(doc(this._db, 'tiles', '' + id));\n            return tileFirebaseMapper({ ...result.data(), _id: result.id });\n        } catch (error) {\n            throw error;\n        }\n    }\n    async fetchTokenInfo(id: ContractTokenID): Promise<ContractTokenInfo> {\n        try {\n            const result = await getDoc(doc(this._db, 'tokens', '' + id));\n            return tokenFirebaseMapper({ ...result.data(), _id: result.id });\n        } catch (error) {\n            throw error;\n        }\n    }\n    protected async fetchTokensByIds(ids: ContractTokenID[]): Promise<ContractTokenInfo[]> {\n        return Promise.all(ids.map(tokenId => this.fetchTokenInfo(tokenId)));\n    }\n\n    async fetchTiles(): Promise<ContractTileInfo[]> {\n\n        try {\n            const [tilesSnapshot, tokesSnapshot] = await Promise.all([getDocs(this._tilesCollection), getDocs(this._tokensCollection)]);\n            const tiles = tilesSnapshot.docs.map(doc => ({ ...doc.data(), _id: doc.id })).map(tileFirebaseMapper);\n            const tokens = tokesSnapshot.docs.map(doc => ({ ...doc.data(), _id: doc.id })).map(tokenFirebaseMapper);\n            console.log('%c tiles, tokens: ', 'border: 1px solid blue', tilesSnapshot.docs, tokesSnapshot.docs.map(doc => doc.data()));\n\n            this._state.next({\n                lastUpdate: new Date().getTime(),\n                tileCells: tiles.map(contractTile => {\n                    const token = tokens.find(t => t.id === contractTile.tokenId);\n                    return fromContractTile(contractTile, token || ERROR_TOKEN);\n                })\n            });\n\n            return [...tiles];\n\n        } catch (error) {\n            console.log('error with loading docs from collections: ', error);\n            throw error;\n        }\n    }\n\n    async groupTiles(tiles: ITileState[], formTileData: Partial<FormTileData>): Promise<[boolean, string]> {\n        // 1. send to MANAGING_CONTRACT groups of tiles\n        // 2. update tiles (from TIMER, but for TEST: update manually here)\n        const sortedTiles = tiles.sort((a, b) => a.cellNumber > b.cellNumber ? 1 : -1);\n        console.log('%c group tiles ', 'background-color: orange; color: green', tiles, [...sortedTiles]);\n        if (!tiles.length) {\n            return [false, 'no tiles for grouping'];\n        }\n        const updContractTilePart: Partial<ContractTileInfo> = sortedTiles.length === 1\n            ? { url: formTileData.url || '', title: formTileData.title || '' }\n            : {};\n        const tokensPromises = sortedTiles.length === 1 ? [\n            updateDoc(\n                doc(this._db, 'tokens', sortedTiles[0].token._id),\n                tokenToFirebaseMapper({\n                    ...sortedTiles[0].token,\n                    price: formTileData.price || sortedTiles[0].token.price\n                })\n            )\n        ] : [];\n        try {\n            await Promise.all([\n                ...tokensPromises,\n                ...sortedTiles.map((tileData, i) => {\n                    const ifParentBounds = formTileData.url && !i ? [...sortedTiles.map(k => k.tile.id)] : [];\n                    const ifInGroupTileBounds = formTileData.url && !!i ? [sortedTiles[0].tile.id] : []\n                    return updateDoc(\n                        doc(\n                            this._db, 'tiles',\n                            tileData.tile._id\n                        ),\n                        tileToFirebaseMapper({\n                            ...tileData.tile,\n                            ...updContractTilePart,\n                            url: !i ? formTileData.url || '' : '',\n                            version: tileData.tile.version + 1,\n                            boundedTiles: !i ? [...ifParentBounds] : [...ifInGroupTileBounds]\n                        })\n                    )\n                })\n            ]);\n            await this.fetchTiles();\n            return [true, ''];\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async buyTiles(tiles: ITileState[], formTileData: Partial<FormTileData>): Promise<[boolean, string]> {\n        // 1. send to MANAGING_CONTRACT groups of tiles\n        // 2. update tiles (from TIMER, but for TEST: update manually here)\n        console.log('%c buy tiles ', 'background-color: orange; color: darkcyan', tiles);\n        if (!tiles.length) {\n            return [false, 'no tiles for buying'];\n        }\n\n        const currAcc = this.getAccount();\n\n        if (!currAcc) return [false, 'no current account'];\n\n        try {\n            const snapShots = await Promise.all(\n                tiles.map(tData => getDoc(doc(this._db, 'tiles', tData.tile._id)))\n            );\n\n            console.log('snapshots', snapShots);\n\n            const storedTiles = snapShots.map(t => tileFirebaseMapper({ ...t.data(), _id: t.id }));\n            // get parent tiles (if we buy not parent, but grouped tiles)\n            const parentTilesTupleIds = storedTiles.reduce<[ContractTileID, ContractTileID][]>(\n                (acc, tile) => {\n                    if (tile.boundedTiles.length && tile.boundedTiles[0] !== tile.id) {\n                        return [...acc, [tile.boundedTiles[0], tile.id]];\n                    }\n                    return [...acc];\n                }, []\n            );\n            const parentStoredTilesSnapshot = await Promise.all<[QuerySnapshot<DocumentData>, ContractTileID]>(\n                parentTilesTupleIds.map(([parenTileId, buyingTileId]) => {\n                    return new Promise(async (resolve, reject) => {\n                        try {\n                            const doc = await getDocs(query(\n                                this._tilesCollection, where('id', '==', '' + parenTileId))\n                            );\n                            resolve([doc, buyingTileId]);\n                        } catch (error) {\n                            reject(error);\n                        }\n                    });\n                })\n            );\n\n            const parentStoredTilesForUpd = parentStoredTilesSnapshot.map<null | [ContractTileInfo, ContractTileID]>(([t, buyingTileId]) => {\n                const docs = t.docs.map(doc => tileFirebaseMapper({ ...doc.data(), _id: doc.id }));\n                const tile = docs[0];\n                if (!tile.boundedTiles.find(x => x === buyingTileId)) return null;\n                return [docs[0], buyingTileId];\n            }).filter(t => !!t) as [ContractTileInfo, ContractTileID][];\n\n            console.log('parent store tiles: ', parentStoredTilesForUpd);\n\n            await Promise.all(\n                parentStoredTilesForUpd.map(([t, buyingTileId]) => updateDoc(\n                    doc(this._db, 'tiles', t._id),\n                    tileToFirebaseMapper({\n                        ...t,\n                        boundedTiles: t.boundedTiles.filter(x => x !== buyingTileId),\n                        version: t.version + 1\n                    })\n                ))\n            );\n\n            await Promise.all([\n                ...tiles.map((tileData, i) => {\n                    const storedTile = storedTiles.find(t => t._id === tileData.tile._id);\n                    if (!storedTile) return Promise.reject(`no tile found (# ${tileData.cellNumber})`);\n\n                    return updateDoc(\n                        doc(this._db, 'tiles', tileData.tile._id),\n                        tileToFirebaseMapper({ ...tileData.tile, title: formTileData.title || '', url: formTileData.url || '', owner: currAcc, boundedTiles: [], version: tileData.tile.version + 1 })\n                    )\n                }),\n                ...tiles.map(tile => {\n                    return updateDoc(\n                        doc(this._db, 'tokens', tile.token._id),\n                        tokenToFirebaseMapper({ ...tile.token, price: formTileData.price || tile.token.price })\n                    )\n                })\n            ]);\n\n            await this.fetchTiles();\n\n            return [true, ''];\n\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async mintTiles(tiles: IUnmintedTileState[], updatedTile: Partial<FormTileData>): Promise<[boolean, string]> {\n\n        console.log('mintTiles', tiles);\n\n        console.log('%c mint tiles ', 'background-color: orange; color: green', tiles);\n\n        const CURR_ADDR = this.getAccount();\n\n        if (!CURR_ADDR) {\n            return [false, 'no current account address'];\n        }\n\n        if (!tiles.length) {\n            return [false, 'no tiles for minting'];\n        }\n\n        try {\n            const result = await Promise.all(\n                tiles.map((tileData, i) =>\n                    addDoc(\n                        this._tokensCollection,\n                        tokenToFirebaseMapper({\n                            id: tileData.cellNumber as ContractTokenID,\n                            _id: undefined,\n                            owner: this.getAccount() || EMPTY_ADDR,\n                            price: updatedTile.price || '2.5'\n                        })\n                    )\n                )\n            );\n            console.log('mint result', result);\n            await Promise.all(\n                tiles.map((tileData, i) =>\n                    addDoc(\n                        this._tilesCollection,\n                        tileToFirebaseMapper({\n                            id: tileData.cellNumber as ContractTileID,\n                            _id: undefined,\n                            version: 0,\n                            boundedTiles: [],\n                            owner: this.getAccount() || EMPTY_ADDR,\n                            title: updatedTile.title || '',\n                            url: updatedTile.url || '',\n                            tokenId: tileData.cellNumber as ContractTokenID,\n                        })\n                    )\n                )\n            );\n            await this.fetchTiles();\n            return [true, ''];\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import React, { useEffect, useMemo, useRef } from 'react';\nimport './App.scss';\n\nimport Header from './containers/Header';\n\nimport CellsLayout from './containers/CellsLayout';\n\nimport { appConfig } from './AppConfig';\n\nimport { CartEvents, ICartEventData, ICellData, ICellEventData, IUnmintedTileState, ITileState, MyCanvasMouseEvents, TilesEventCart } from './interfaces/cells';\n\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport CartModal from './containers/Cart/CartModal';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { CellEventTypes, CellsEvent } from './containers/CellsLayout/CellsLayout';\n\nimport ServiceContext from './contexts/ServiceContext';\nimport TestDataService from './services/TestDataService';\nimport { AccountAddr, ContractTileInfo, EMPTY_ADDR, FormTileData } from './services/interfaces';\n\nconst App = () => {\n\n    const cellSize: [number, number] = [appConfig.cellWidth, appConfig.cellHeight];\n    console.log('%c render global app! ', 'border: 2px solid red; color: silver; background-color: darkblue;');\n\n    const dataService = useMemo(() => new TestDataService(), []);\n\n    const currentAcc$ = useMemo(() => new BehaviorSubject<AccountAddr>(EMPTY_ADDR), []);\n\n    const cellEvent$ = useMemo(() => new BehaviorSubject<ICellEventData[]>([]), []);\n    const selectedCells$ = useMemo(() => new BehaviorSubject<ICellData[]>([]), []);\n    const selectedCellsRef = useRef<ICellData[]>([]);\n    const cartEvent$ = useMemo(() => new Subject<ICartEventData>(), []);\n    const cartState$ = useMemo(() => new Subject<TilesEventCart>(), []);\n    const cellsUpdate$ = useMemo(() => new Subject<CellsEvent>(), []);\n\n    useEffect(() => {\n        // 1.   load tiles  [ for every tile we have to load its Token ]\n        // 2.   start timer\n        // 3.   in every tick: load tiles\n        // 4.   find new tiles (compare timesatamps between current loaded tiles and state tiles)\n        // 5.   new\\updated tiles: send to eventBus (for displaying)\n        dataService.connect()\n            .then(isOk => {\n                const acc = dataService.getAccount();\n                acc && currentAcc$.next(acc);\n                dataService.fetchTiles().then(tiles => console.log('%c items loaded! ', 'color: green', [...tiles]));\n\n            })\n            .catch((err) => { });\n    }, [dataService, currentAcc$]);\n\n    useEffect(() => {\n        const sub = cellEvent$.subscribe((evArr) => {\n            const selected = evArr.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map(t => t.curr);\n            const newCells: ICellData[] = [];\n            let evCells = [...selected];\n            const selectedState = [...selectedCellsRef.current];\n            selectedState.forEach(t => {\n                // store items of current stated cells if there are not in EV_CELLS\n                if (!evCells.find(x => x.cellNumber === t.cellNumber)) newCells.push(t);\n                // update EV_CELLS: only cells that are not stored (new)\n                evCells = evCells.filter(x => x.cellNumber !== t.cellNumber);\n            });\n            if (evCells.length || newCells.length) {\n                selectedCellsRef.current = [...selected];\n                selectedCells$.next([...selected]);\n            }\n        });\n        return () => sub.unsubscribe();\n    }, [cellEvent$, selectedCells$, selectedCellsRef]);\n    useEffect(() => {\n        const sub = cartEvent$.subscribe((ev) => {\n            console.log('%c cartEvent ', 'border: 1px solid green', ev, dataService.getState());\n\n            const DATA_SERVICE_STATE = dataService.getState().getValue();\n\n            if (ev.type === CartEvents.Modify) {\n                cartState$.next({\n                    type: CartEvents.Modify,\n                    payload: DATA_SERVICE_STATE.tileCells.filter(t => {\n                        return cellEvent$.getValue().find(x =>\n                            x.mouseType === MyCanvasMouseEvents.Click\n                            && t.cellNumber === x.curr.cellNumber);\n                    }),\n                    groupUrl: ''\n                });\n            }\n            if (ev.type === CartEvents.Open) {\n                cartState$.next({\n                    type: CartEvents.Open,\n                    payload: cellEvent$.getValue()\n                        .filter(t => t.mouseType === MyCanvasMouseEvents.Click)\n                        .map<IUnmintedTileState>(t => {\n                            const tile = DATA_SERVICE_STATE.tileCells.find(x => x.cellNumber === t.curr.cellNumber);\n                            return {\n                                cellNumber: t.curr.cellNumber,\n                                point: t.curr.point,\n                                tile: tile && tile.tile,\n                                token: tile && tile.token\n                            }\n                        }),\n                    groupUrl: ''\n                });\n            }\n            if (ev.type === CartEvents.ShowOther) {\n                return cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\n            }\n            if (ev.type === CartEvents.ShowOwn) {\n                const myAccount = dataService.getAccount();\n                console.log('my account: ', myAccount);\n                cellsUpdate$.next([\n                    CellEventTypes.DisplayOwnCells,\n                    dataService.getState().getValue().tileCells\n                        .filter(tileData => tileData.tile.owner === myAccount)\n                        .map<ICellEventData>(t => ({\n                            mouseType: MyCanvasMouseEvents.None,\n                            curr: { cellNumber: t.cellNumber, point: t.point },\n                            lastCell: { cellNumber: -1, point: [0, 0] }\n                        }))\n\n                ]);\n            }\n        });\n        return () => sub.unsubscribe();\n    }, [dataService, cartEvent$, cartState$, cellEvent$, cellsUpdate$]);\n    useEffect(() => {\n        const sub = cartState$.subscribe((ev) => {\n            console.log('%c cartState ', 'border: 1px solid blue', ev);\n\n            // const DATA_SERVICE_STATE = dataService.getState().getValue();\n\n            if (ev.type === CartEvents.SaveTiles) {\n                // TASK: update TILE BOUNDS when regrouping!\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\n\n                if (tiles.length) dataService.groupTiles([...tiles] as ITileState[], ev.params || {});\n                // else {\n                //     cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\n                //     dataService.mintTiles([...ev.payload] as IUnmintedTileState[], ev.groupUrl);\n                // }\n            }\n            if (ev.type === CartEvents.Buy) {\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\n\n                let tileData: Partial<FormTileData> = ev.params ? { ...ev.params } : {};\n                tileData.url = tileData.url || ev.groupUrl;\n\n                if (tiles.length) {\n                    cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\n                    dataService.buyTiles([...tiles] as ITileState[], tileData);\n                } else {\n                    cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\n                    dataService.mintTiles([...ev.payload] as IUnmintedTileState[], tileData);\n                }\n            }\n            if (ev.type === CartEvents.RemoveItems) {\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\n                cellsUpdate$.next([CellEventTypes.Remove, [...tiles] as ITileState[]]);\n            }\n            if (ev.type === CartEvents.Save) {\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\n                cellsUpdate$.next([CellEventTypes.UserUpdateTileGroup, [...tiles] as ITileState[]]);\n            }\n        });\n        return () => sub.unsubscribe();\n    }, [dataService, cellsUpdate$, cartState$, cellEvent$]);\n    return (\n        <div id=\"app-container\">\n            <ServiceContext.Provider value={ dataService }>\n                <Header event$={ cartEvent$ } selectedCells$={ selectedCells$ } />\n                <CellsLayout\n                    cellSize={ cellSize }\n                    currentAcc$={ currentAcc$ }\n                    cellsAmount={ appConfig.cellsAmount }\n                    cellBorderWidth={ appConfig.cellBorderWidth }\n                    maxCanvasWidth={ appConfig.maxCanvasWidth || 0 }\n                    event$={ cellEvent$ }\n                    cellsUpdate$={ cellsUpdate$ }\n                />\n                <CartModal event$={ cartState$ } />\n            </ServiceContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}