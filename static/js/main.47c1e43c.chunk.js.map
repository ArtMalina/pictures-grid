{"version":3,"sources":["interfaces/cells.ts","components/Button.tsx","containers/Header/index.ts","containers/Header/Header.tsx","contexts/ServiceContext.ts","components/Canvas.tsx","AppConfig.ts","helpers/canvasMath.ts","components/CellsGrid.tsx","containers/CellsLayout/CellsLayout.tsx","containers/Cart/CartModal.tsx","containers/CellsLayout/index.ts","components/Input.tsx","components/Modal.tsx","services/testDbConfig.ts","services/interfaces.ts","services/mappers.ts","services/TestDataService.ts","App.tsx","index.tsx"],"names":["MyCanvasMouseEvents","MyModes","CartEvents","Button","props","title","event$","toggle","noActive","light","small","color","action","group","noBraces","fullWidth","textAlign","onClickHandler","useCallback","event","stopPropagation","preventDefault","next","type","Close","payload","modifiersTxt","filter","Boolean","map","t","push","className","join","onClick","children","Header","selectedCells$","filterBtn$","useMemo","Subject","useState","togglesState","setToggles","togglesStateRef","useRef","cells","setCells","useEffect","sub","subscribe","ev","console","log","current","ShowOwn","myState","allState","ShowOther","unsubscribe","style","backgroundColor","padding","width","Open","Modify","length","Context","React","createContext","Component","height","canvas2dCtxInList$","Click","onMouseMove","Move","setCanvasElement","el","getValue","ctx","getContext","id","onMouseLeave","ref","appConfig","inRowCells","cellsAmount","cellWidth","cellHeight","cellBorderWidth","maxCanvasWidth","getPointByCellNumber","cellNumber","y","Math","floor","BorderColors","getMin","index","arr","reduce","memo","getMax","COLORS","CellEventTypes","getPointByArea","tiledWidth","tiledHeight","offx","offy","offw","offh","drawCellsGrid","ctx2d","canvasSize","dy","dx","Array","from","forEach","_empty","i","offsetX","ddx","ddy","cellData","x","w","h","beginPath","fillStyle","random","rect","fill","lineWidth","strokeStyle","BASE","stroke","font","fillText","toString","round","drawCell","point","drawCellHovering","_canvasSize","borderWidth","borderColor","pointX","pointY","px","py","drawBoundedTilesImage","image","boundedCellsCoords","left","top","right","bottom","warn","getCropPoint","getRealPoint","cropX","cropY","cropW","cropH","realX","realY","realW","realH","ofstX","ofstY","drawImage","CellsGrid","cellW","cellH","amount","ctx2dInList","displaying","displayCells","clearing","clearCells","tilesForDisplay","displayTiles","highlightCells","clearTiles","clearedCellNumberMap","displayedMap","displayHoverSelectedCells","tileCell","tile","url","img","Image","onload","boundedTiles","src","drawTileCell","isDisplayedOneLst","mouseType","SHOW_FILTERED_TILES","SELECTED","HOVERED","HOVER_SELECTED","CartOpenTypes","MAP_CURR_CELL_EV_TO_CELL_GRID_EV","_i","_arr","curr","CellsLayout","cellSize","cellsUpdate$","currentAcc$","modeRef","Buy","dataService","useContext","ServiceContext","sizeWithOuter","setSize","boxRef","cellsLayoutSizeRef","rowsDataRef","filteredCellsRef","cellTileUpdatesRef","BehaviorSubject","canvasMouseEvent$","cellsGridEvent$","shadeCells","contractTiles$","onBoxRef","finalCellWidth","rectWidth","inRow","finalWidth","rows","ceil","finalHeight","getState","val","cellEventsRef","updatesRef","cellEventOfIndex","acc","contractTilesData","isUpdateNeeds","tileCells","lastUpdate","UpdateByContract","highlights","Edit","owner","getAccount","None","evType","cellEvents","DisplayAll","DisplayOwnCells","unhighlightCells","notHighlightedSelected","findIndex","Remove","afterRemoveCellEvents","elem","clientX","clientY","currentTarget","offsetLeft","offsetTop","scrollLeft","scrollTop","selectedCellEvents","ft","coordX","coordY","inRowCount","deltaX","deltaY","getCellByClick","newCellData","find","MODE","CURRENT_ADDR","contractTiles","CLICK_TO_NEW_CELL","ADD_NEW_MOVE_CELL","EDIT_NOT_MINE_TILE_OE_EMPTY","result","display","clear","finalCellEvents","lastCell","ct","Canvas","Input","value","state","setState","onChangeHandler","onChange","disabled","Modal","open","groupUrl","includes","ifNewCell","token","BTN_TITLE","EV_NAME","Save","marginLeft","CartModal","modalEvent$","remove$","cartEvent$","tilesState","setTilesState","tilesRef","groupAvatarUrl","input$","launcherSub","ModifyCellsMode","BuyCellsMode","SaveTiles","RemoveItems","marginBottom","price","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","EMPTY_ADDR","fromContractTile","ERROR_TOKEN","_id","tileToFirebaseMapper","item","idPart","tokenId","tileFirebaseMapper","Number","split","tokenFirebaseMapper","tokenToFirebaseMapper","DataService","_account","_state","_firebaseApp","_db","_tilesCollection","_tokensCollection","this","initializeApp","testFirebaseConfig","getFirestore","collection","Promise","resolve","setTimeout","a","getDoc","doc","data","ids","all","fetchTokenInfo","getDocs","tilesSnapshot","tokesSnapshot","tiles","docs","tokens","Date","getTime","contractTile","sortedTiles","sort","b","tileData","updateDoc","k","fetchTiles","currAcc","addDoc","undefined","toLocaleString","App","TestDataService","cellEvent$","selectedCellsRef","cartState$","connect","then","isOk","catch","err","evArr","selected","newCells","evCells","DATA_SERVICE_STATE","myAccount","groupTiles","buyTiles","mintTiles","UserUpdateTileGroup","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47c1e43c.chunk.js","sourcesContent":["import { ContractTileInfo, ContractTokenInfo } from \"../services/interfaces\";\r\n\r\nexport type TileCoords = [number, number];\r\n\r\nexport enum MyCanvasMouseEvents {\r\n    None = -1,\r\n    Move = 0,\r\n    Click = 1\r\n}\r\n\r\nexport enum MyModes {\r\n    None = '<none>',\r\n    Buy = '<buy-cell>',\r\n    Edit = '<edit-cell>',\r\n}\r\n\r\nexport interface ICellData {\r\n    cellNumber: number;\r\n    point: TileCoords;\r\n}\r\n\r\nexport type ICellEventData = {\r\n    lastCell: ICellData;\r\n    curr: ICellData;\r\n    mouseType: MyCanvasMouseEvents;\r\n    // contractTile?: ContractTileInfo;\r\n    // lastUpdate?: number;\r\n};\r\n\r\nexport enum CartEvents {\r\n    None = 'None',\r\n    Open = 'Open',\r\n    Close = 'Close',\r\n    Save = 'Save',\r\n    Buy = 'Buy',\r\n    RemoveItems = 'RemoveItems',\r\n    Modify = 'Modify',\r\n    ShowOwn = 'ShowOwn',\r\n    ShowOther = 'ShowOther',\r\n    SaveTiles = 'SaveTiles',\r\n}\r\n\r\ntype CartEventsOfCell =\r\n    | CartEvents.Close\r\n    | CartEvents.None\r\n    | CartEvents.Open\r\n    | CartEvents.ShowOther\r\n    | CartEvents.ShowOwn;\r\n\r\ntype CellsEventCart = {\r\n    payload: ICellEventData[];\r\n    type: CartEventsOfCell;\r\n    status?: any;\r\n};\r\n\r\ntype TileData = {\r\n    tile: ContractTileInfo;\r\n    token: ContractTokenInfo;\r\n}\r\n\r\nexport type ITileState = ICellData & TileData;\r\n\r\nexport type IUnmintedTileState = ICellData & Partial<TileData>;\r\n\r\nexport type TilesEventCart = {\r\n    payload: IUnmintedTileState[];\r\n    type:\r\n    | CartEvents.Close\r\n    | CartEvents.None\r\n    | CartEvents.Save\r\n    | CartEvents.Open\r\n    | CartEvents.Modify\r\n    | CartEvents.SaveTiles\r\n    | CartEvents.Buy\r\n    | CartEvents.RemoveItems;\r\n    status?: any;\r\n    groupUrl: string;\r\n};\r\n\r\nexport type ICartEventData = CellsEventCart | TilesEventCart;\r\n","import React, { PropsWithChildren, useCallback, useRef, useState } from 'react';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\nimport { CartEvents, ICartEventData } from '../interfaces/cells';\r\n\r\n\r\nexport interface IButtonProps<T = any> {\r\n    title?: string;\r\n    action?: T;\r\n    noActive?: boolean;\r\n    toggle?: undefined | 1 | 2;\r\n    group?: number;\r\n    light?: boolean;\r\n    noBraces?: boolean;\r\n    fullWidth?: boolean;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    small?: boolean;\r\n    color?: 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close';\r\n    event$?: Subject<ICartEventData | T>;\r\n}\r\n\r\nconst Button = (props: PropsWithChildren<IButtonProps>) => {\r\n    const { title, event$, toggle, noActive, light, small, color, action, group, noBraces, fullWidth, textAlign } = props;\r\n    const onClickHandler = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        event$ && event$.next(action ? { ...action, group } : { type: CartEvents.Close, payload: [] });\r\n    }, [event$, action, group]);\r\n\r\n    const modifiersTxt = [fullWidth && 'full-width', textAlign && `align-${textAlign}`, noActive && 'no-action', light && 'light', small && 'small', color].filter(Boolean).map(t => `btn--${t}`);\r\n    if (toggle === 1) modifiersTxt.push('btn--untoggled');\r\n    if (toggle === 2) modifiersTxt.push('btn--toggled');\r\n    if (group) modifiersTxt.push('btn--grouped');\r\n    return (\r\n        <div className={ ['btn', ...modifiersTxt].join(' ') } onClick={ onClickHandler }>\r\n            { !noBraces && <div className=\"btn_border btn_border--left\"></div> }\r\n            { !!title && <div className=\"btn-text\">{ title || '' }</div> }\r\n            { props.children }\r\n            { !noBraces && <div className=\"btn_border btn_border--right\"></div> }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;","import Header from './Header';\r\n\r\nexport default Header;","import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport Button from '../../components/Button';\r\nimport { CartEvents, ICartEventData, ICellData } from '../../interfaces/cells';\r\n\r\n\r\nexport interface IHeaderProps {\r\n    event$: Subject<ICartEventData>;\r\n    selectedCells$: BehaviorSubject<ICellData[]>;\r\n}\r\n\r\nconst Header = (props: IHeaderProps) => {\r\n    const { event$, selectedCells$ } = props;\r\n    const filterBtn$ = useMemo(() => new Subject<ICartEventData & { group?: number, status?: number }>(), []);\r\n    const [togglesState, setToggles] = useState<[2 | 1, 2 | 1]>([1, 2]);\r\n    const togglesStateRef = useRef(togglesState);\r\n    const [cells, setCells] = useState<ICellData[]>([]);\r\n    useEffect(() => {\r\n        const sub = filterBtn$.subscribe((ev) => {\r\n            console.log('%c filterBtn ev: ', 'background-color: brown; color: white;', ev);\r\n            console.log('downEv togglesStateRef.current', togglesStateRef.current);\r\n            if (ev.type === CartEvents.ShowOwn) {\r\n                if (ev.group) {\r\n                    const [myState, allState] = togglesStateRef.current;\r\n                    togglesStateRef.current = [myState === 1 ? 2 : 1, allState === 1 ? 2 : 1];\r\n                    setToggles(togglesStateRef.current);\r\n                }\r\n                return event$.next({\r\n                    type: togglesStateRef.current[0] === 1 ? CartEvents.ShowOther : CartEvents.ShowOwn,\r\n                    payload: ev.payload\r\n                });\r\n            }\r\n            event$.next(ev);\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [filterBtn$, event$, togglesStateRef]);\r\n    useEffect(() => {\r\n        const sub = selectedCells$.subscribe((cells) => {\r\n            console.log('%c filterBtn ev: ', 'background-color: brown; color: white;', cells);\r\n            setCells([...cells]);\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [selectedCells$]);\r\n    return <header>\r\n        <div className=\"header_content\">\r\n            <div className=\"flex-cnt align-center mx-4\">\r\n                <Button light color=\"header\" title=\"Hello, crypto man\" />\r\n            </div>\r\n            <div style={ { backgroundColor: 'white', padding: '0 10px' } }>\r\n            </div>\r\n            <div className=\"flex-cnt align-center\">\r\n                <div className=\"flex-cnt item fb-3\">\r\n                    <Button light small color=\"primary\" title=\"TILES\" event$={ filterBtn$ }\r\n                        action={ { type: CartEvents.ShowOwn, payload: [] } } group={ 1 }>\r\n                        <Button\r\n                            event$={ filterBtn$ }\r\n                            action={ { type: CartEvents.ShowOwn, payload: [] } }\r\n                            light\r\n                            small\r\n                            noBraces\r\n                            group={ 1 }\r\n                            toggle={ togglesState[0] }\r\n                            color=\"primary\"\r\n                            title=\"MY\"\r\n                        />\r\n                        <Button\r\n                            event$={ filterBtn$ }\r\n                            action={ { type: CartEvents.ShowOwn, payload: [] } }\r\n                            light\r\n                            small\r\n                            noBraces\r\n                            group={ 2 }\r\n                            toggle={ togglesState[1] }\r\n                            color=\"primary\"\r\n                            title=\"FOR SALE\"\r\n                        />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"flex-cnt justify-end\" style={ { width: 250 } }>\r\n                    <div className=\"flex-cnt item shrink mx-3\">\r\n                        <Button\r\n                            event$={ event$ }\r\n                            action={ { type: togglesState[0] === 1 ? CartEvents.Open : CartEvents.Modify, payload: [] } }\r\n                            light\r\n                            color=\"info\"\r\n                            title={ togglesState[0] === 1 ? \"Details\" : \"Modify\" }\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex-cnt item shrink badge-cnt\">\r\n                        { !!cells.length && <div className=\"badge badge--primary\">{ togglesState[0] === 1 ? '!' : cells.length }</div> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/* 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close' */ }\r\n        {/* <div className=\"flex-cnt align-center item wrap fb-6\">\r\n            <Button light color=\"header\" title=\"header\" />\r\n            <Button light color=\"base\" title=\"base\" />\r\n            <Button light color=\"active\" title=\"active\" />\r\n            <Button light color=\"primary\" title=\"primary\" />\r\n            <Button light color=\"secondary\" title=\"secondary\" />\r\n            <Button light color=\"info\" title=\"info\" />\r\n            <Button light color=\"error\" title=\"error\" />\r\n            <Button light color=\"close\" title=\"close\" />\r\n            <div className=\"flex-cnt justify-end align-center item\" style={ { backgroundColor: 'white' } }>\r\n                <Button color=\"header\" title=\"header\" />\r\n                <Button color=\"base\" title=\"base\" />\r\n                <Button color=\"active\" title=\"active\" />\r\n                <Button color=\"primary\" title=\"primary\" />\r\n                <Button color=\"secondary\" title=\"secondary\" />\r\n                <Button color=\"info\" title=\"info\" />\r\n                <Button color=\"error\" title=\"error\" />\r\n                <Button color=\"close\" title=\"close\" />\r\n            </div>\r\n        </div> */}\r\n    </header>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { IDataService } from \"../services/interfaces\";\r\n\r\nconst Context = React.createContext<IDataService | null>(null);\r\n\r\nexport default Context;","import React, { useCallback } from 'react';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { MyCanvasMouseEvents } from '../interfaces/cells';\r\n\r\n\r\nexport interface ICanvasProps {\r\n    width: number;\r\n    height: number;\r\n    canvas2dCtxInList$: BehaviorSubject<CanvasRenderingContext2D[]>;\r\n    event$: Subject<[MyCanvasMouseEvents, React.MouseEvent<HTMLCanvasElement, MouseEvent>]>;\r\n}\r\n\r\nconst Component = (props: ICanvasProps) => {\r\n    const { width, height, event$, canvas2dCtxInList$ } = props;\r\n    const onClick = useCallback((event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        event$.next([MyCanvasMouseEvents.Click, event]);\r\n    }, [event$]);\r\n    const onMouseMove = useCallback((event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\r\n        event$.next([MyCanvasMouseEvents.Move, event]);\r\n    }, [event$]);\r\n\r\n    const setCanvasElement = useCallback((el: HTMLCanvasElement | null) => {\r\n        if (el && !canvas2dCtxInList$.getValue().length) {\r\n            const ctx = el.getContext('2d');\r\n            if (ctx) canvas2dCtxInList$.next([ctx]);\r\n        }\r\n    }, [canvas2dCtxInList$]);\r\n\r\n    return (\r\n        <div id=\"canvas-container\" style={ { width, height } }>\r\n            <canvas\r\n                id=\"canvas\"\r\n                onClick={ onClick }\r\n                onMouseMove={ onMouseMove }\r\n                onMouseLeave={ onMouseMove }\r\n                width={ width }\r\n                height={ height }\r\n                ref={ setCanvasElement }>\r\n            </canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Component;","export interface IAppConfig {\r\n    cellsAmount: number;\r\n    inRowCells: number;\r\n    cellWidth: number;\r\n    cellHeight: number;\r\n    cellBorderWidth: number;\r\n    maxCanvasWidth: number;\r\n}\r\n\r\nexport const appConfig: IAppConfig = {\r\n    inRowCells: 0,\r\n    cellsAmount: 500,\r\n    cellWidth: 50,\r\n    cellHeight: 50,\r\n    cellBorderWidth: 2,\r\n    maxCanvasWidth: 1350,\r\n}\r\nappConfig.inRowCells = Math.floor((appConfig.maxCanvasWidth - appConfig.cellBorderWidth) / (appConfig.cellWidth + appConfig.cellBorderWidth));\r\n","import { appConfig } from '../AppConfig';\r\nimport { TileCoords } from '../interfaces/cells';\r\n\r\n/**\r\n * \r\n * @param cellNumber starts from ZERO\r\n * @returns \r\n */\r\nexport function getPointByCellNumber(cellNumber: number): [number, number] {\r\n    const y = Math.floor(cellNumber / appConfig.inRowCells);\r\n    const x = cellNumber - appConfig.inRowCells * y;\r\n    return [x, y];\r\n}\r\n\r\nexport function getCellByClick(coordX: number, coordY: number, { inRowCount, cellW, cellH }: { inRowCount: number, cellW: number, cellH: number }) {\r\n    const deltaX = Math.floor(coordX / cellW);\r\n    const deltaY = Math.floor(coordY / cellH);\r\n    return { cellNumber: deltaY * inRowCount + deltaX, x: deltaX, y: deltaY, w: cellW, h: cellH };\r\n}\r\n\r\nconst getMin = (index: 0 | 1, arr: TileCoords[]) => arr.reduce<TileCoords>((memo, t) => (!memo[0] && !memo[1]) || memo[index] > t[index] ? [t[0], t[1]] : memo, [0, 0]);\r\nconst getMax = (index: 0 | 1, arr: TileCoords[]) => arr.reduce<TileCoords>((memo, t) => (!memo[0] && !memo[1]) || memo[index] < t[index] ? [t[0], t[1]] : memo, [0, 0]);\r\n\r\nexport const getBoundTilesCorners = (arr: TileCoords[]) => {\r\n\r\n    const left = getMin(0, arr);\r\n    const top = getMin(1, arr);\r\n\r\n    const right = getMax(0, arr);\r\n    const bottom = getMax(1, arr);\r\n\r\n    return { left, top, right, bottom };\r\n\r\n}","import { useEffect } from 'react';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport { getBoundTilesCorners, getPointByCellNumber } from '../helpers/canvasMath';\r\nimport { IEventProps } from '../helpers/IEventProps';\r\nimport { ICellData, ITileState, MyCanvasMouseEvents, TileCoords } from '../interfaces/cells';\r\n\r\n\r\nexport interface ICellsGridEvent extends ICellData {\r\n    mouseType: MyCanvasMouseEvents;\r\n}\r\n\r\nexport type CellsGridEventData = {\r\n    displayCells: ICellsGridEvent[],\r\n    clearCells: ICellsGridEvent[],\r\n    displayTiles: ITileState[],\r\n    clearTiles: ITileState[],\r\n    highlightCells: ICellsGridEvent[],\r\n    shadeCells: ICellsGridEvent[],\r\n};\r\n\r\nexport interface ICellsGridProps extends IEventProps<CellsGridEventData> {\r\n    cellW: number;\r\n    cellH: number;\r\n    cellBorderWidth: number;\r\n    canvasSize: [number, number];\r\n    amount: number;\r\n    canvas2dCtxInList$: BehaviorSubject<CanvasRenderingContext2D[]>;\r\n}\r\n\r\nconst COLORS = ['#212529', '#23272c', '#22262b', '#23282e', '#25292e'];\r\n\r\n// const BORDER_COLOR = '#000000';\r\n// // const BORDER_COLOR = '#accaef';\r\n// const BORDER_HOVER_COLOR = 'yellow';\r\n// const BORDER_SELECTED_COLOR = 'orange';\r\n\r\nenum BorderColors {\r\n    BASE = '#000000',\r\n    HOVERED = 'yellow',\r\n    SELECTED = 'orange',\r\n    HOVER_SELECTED = '#69f0ae',\r\n    SHOW_FILTERED_TILES = 'silver'\r\n    // HOVER_SELECTED = '#00e5ff'\r\n    // HOVER_SELECTED = '#e64a19'\r\n    // HOVER_SELECTED = '#76ff03'\r\n\r\n}\r\n\r\nconst getPointByArea = (tiledWidth: number, tiledHeight: number, offx = 0, offy = 0, offw = 0, offh = 0) =>\r\n    (t: [number, number, number, number]) => [t[0] * tiledWidth + offx, t[1] * tiledHeight + offy, t[2] * tiledWidth - offw, t[3] * tiledHeight - offh];\r\n\r\n\r\nconst drawCell = (ctx2d: CanvasRenderingContext2D, [x, y, w, h]: [number, number, number, number], cellBorderWidth: number, cellData: ICellData) => {\r\n\r\n    ctx2d.beginPath();\r\n\r\n    // const r = 'rgb(38, 70, 83)'\r\n    // const r = 40 - Math.round(4 * Math.random());\r\n    // const g = 74 - Math.round(7 * Math.random());\r\n    // const b = 87 - Math.round(8 * Math.random());\r\n    // const r = 'rgb(61, 64, 91)'\r\n    // const r = 64 - Math.round(6 * Math.random());\r\n    // const g = 67 - Math.round(7 * Math.random());\r\n    // const b = 95 - Math.round(9 * Math.random());\r\n    // const r = 'rgb(0, 48, 73)'\r\n    // const r = 0;\r\n    // const g = 51 - Math.round(5 * Math.random());\r\n    // const b = 77 - Math.round(7 * Math.random());\r\n\r\n    ctx2d.fillStyle = COLORS[Math.floor(5 * Math.random())];\r\n    ctx2d.rect(x, y, w + cellBorderWidth, h + cellBorderWidth);\r\n    ctx2d.fill();\r\n\r\n    ctx2d.lineWidth = cellBorderWidth;\r\n    ctx2d.strokeStyle = BorderColors.BASE;\r\n    ctx2d.stroke();\r\n\r\n    ctx2d.font = \"italic 12pt Arial\";\r\n    ctx2d.fillStyle = '#4fc3f7';\r\n    ctx2d.fillText(`${cellData.cellNumber.toString()}`, Math.round(x + w * 0.1), Math.round(y + h * 0.5 - 5));\r\n};\r\n\r\nconst drawCellsGrid = (\r\n    ctx2d: CanvasRenderingContext2D,\r\n    canvasSize: [number, number],\r\n    cellsAmount: number,\r\n    cellWidth: number,\r\n    cellHeight: number,\r\n    cellBorderWidth: number\r\n) => {\r\n\r\n    const [width] = canvasSize;\r\n\r\n    let dy: number = cellBorderWidth * 0.5;\r\n    let dx: number = cellBorderWidth * 0.5;\r\n\r\n    Array.from(new Array(cellsAmount)).forEach((_empty: any, i: number) => {\r\n\r\n        let offsetX = cellBorderWidth;\r\n        let offsetY = cellBorderWidth;\r\n\r\n        if (dx + cellWidth > width) {\r\n\r\n            dx = cellBorderWidth * 0.5;\r\n            dy += cellHeight + offsetY;\r\n        }\r\n\r\n        ((i, ddx, ddy) => drawCell(\r\n            ctx2d,\r\n            [ddx, ddy, cellWidth, cellHeight],\r\n            cellBorderWidth,\r\n            { cellNumber: i + 1, point: [-1, -1] }\r\n        ))(i, dx, dy);\r\n\r\n        dx += cellWidth + offsetX;\r\n    });\r\n};\r\n\r\n// TODO: use via hoc maybe\r\nconst drawCellHovering = (\r\n    ctx2d: CanvasRenderingContext2D,\r\n    { point: [pointX, pointY] }: ICellData,\r\n    _canvasSize: [number, number],\r\n    [w, h]: [number, number],\r\n    borderWidth: number,\r\n    borderColor: BorderColors\r\n) => {\r\n\r\n    const px = borderWidth * 0.5 + (w + borderWidth) * pointX;\r\n    const py = borderWidth * 0.5 + (h + borderWidth) * pointY;\r\n\r\n    ctx2d.beginPath();\r\n\r\n    ctx2d.rect(px, py, w + borderWidth, h + borderWidth);\r\n\r\n    ctx2d.lineWidth = borderWidth;\r\n    ctx2d.strokeStyle = borderColor;\r\n    ctx2d.stroke();\r\n};\r\n\r\nconst drawTileCell = (ctx2d: CanvasRenderingContext2D, tileCell: ITileState, _canvasSize: [number, number], [w, h]: [number, number], borderWidth: number) => {\r\n    const [pointX, pointY] = tileCell.point;\r\n\r\n    const x = borderWidth + (w + borderWidth) * pointX;\r\n    const y = borderWidth + (h + borderWidth) * pointY;\r\n\r\n    ctx2d.beginPath();\r\n\r\n    ctx2d.fillStyle = '#37474f';\r\n    ctx2d.rect(x, y, w, h);\r\n    ctx2d.fill();\r\n\r\n    if (!tileCell.tile.url) return;\r\n\r\n    const img = new Image();\r\n    img.onload = () => {\r\n\r\n\r\n        if (tileCell.tile.boundedTiles.length && tileCell.tile.boundedTiles[0] === tileCell.tile.id) {\r\n            console.warn('draw image', img, tileCell.tile);\r\n            drawBoundedTilesImage(ctx2d, img, tileCell.tile.boundedTiles.map(t => getPointByCellNumber(t)), [w, h], borderWidth);\r\n            return;\r\n        }\r\n        console.log('draw tile cell', tileCell);\r\n        // const natW = img.naturalWidth;\r\n        // const natH = img.naturalHeight;\r\n        // ctx.drawImage(img, 0, 0, natW, natH, x, y, w, h);\r\n        ctx2d.beginPath();\r\n        ctx2d.rect(x, y, w, h);\r\n        ctx2d.fillStyle = '#37474f';\r\n        ctx2d.fill();\r\n        ctx2d.drawImage(img, x, y, w, h);\r\n    };\r\n    img.src = tileCell.tile.url;\r\n\r\n};\r\n\r\nconst drawBoundedTilesImage = (\r\n    ctx2d: CanvasRenderingContext2D,\r\n    image: HTMLImageElement,\r\n    boundedCellsCoords: TileCoords[],\r\n    [w, h]: [number, number],\r\n    borderWidth: number\r\n) => {\r\n\r\n    const { left, right, bottom, top } = getBoundTilesCorners(boundedCellsCoords);\r\n\r\n    console.warn('corners: left', left);\r\n    console.warn('corners: right', right);\r\n    console.warn('corners: top', top);\r\n    console.warn('corners: bottom', bottom);\r\n\r\n    const [dx, dy] = [right[0] - left[0] + 1, bottom[1] - top[1] + 1];\r\n\r\n    console.log('dx dy in bounded ', dx, dy, borderWidth);\r\n\r\n    const getCropPoint = getPointByArea(\r\n        image.width / dx,\r\n        image.height / dy,\r\n        -left[0] * image.width / dx,\r\n        -top[1] * image.height / dy,\r\n        1 / dx,\r\n        1 / dy\r\n    );\r\n    const getRealPoint = getPointByArea(w, h, 1, 1, 0, 0);\r\n\r\n    boundedCellsCoords.forEach(t => {\r\n        console.log('t', t);\r\n        const [cropX, cropY, cropW, cropH] = getCropPoint([t[0], t[1], 1, 1]);\r\n        const [realX, realY, realW, realH] = getRealPoint([t[0], t[1], 1, 1]);\r\n        console.log('%c crop x-y-w-h ', 'background-color: brown;color: white', cropX, cropY, cropW, cropH);\r\n        console.log('%c real x-y-w-h ', 'background-color: brown;color: white', realX, realY, realW, realH);\r\n        const ofstX = borderWidth * 0.5 + borderWidth * t[0];\r\n        const ofstY = borderWidth * 0.5 + borderWidth * t[1];\r\n        ctx2d.drawImage(\r\n            image,\r\n            cropX, cropY,\r\n            cropW, cropH,\r\n            realX + ofstX, realY + ofstY,\r\n            realW, realH\r\n        );\r\n    });\r\n\r\n};\r\n\r\nconst CellsGrid = (props: ICellsGridProps) => {\r\n\r\n    const { cellW, cellH, cellBorderWidth, amount, canvas2dCtxInList$, event$, canvasSize } = props;\r\n\r\n    useEffect(() => {\r\n        console.log('%c render cells Grid! ', 'border: 1px solid orange;', canvasSize);\r\n        const sub = canvas2dCtxInList$.subscribe((ctx2dInList) => {\r\n            ctx2dInList.forEach(ctx2d => {\r\n                drawCellsGrid(ctx2d, canvasSize, amount, cellW, cellH, cellBorderWidth);\r\n            });\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [cellW, cellH, cellBorderWidth, amount, canvasSize, canvas2dCtxInList$]);\r\n\r\n    useEffect(() => {\r\n        const sub = event$.subscribe((ev) => {\r\n            const {\r\n                displayCells: displaying,\r\n                clearCells: clearing,\r\n                displayTiles: tilesForDisplay,\r\n                clearTiles: tilesForClear,\r\n                highlightCells,\r\n            } = ev;\r\n            // console.log('cellsEvData: displaying', displaying);\r\n            // console.log('cellsEvData: clearing', clearing);\r\n            canvas2dCtxInList$.getValue().forEach(ctx2d => {\r\n\r\n                let clearedCellNumberMap: any = {};\r\n                let displayedMap: any = {};\r\n                const displayHoverSelectedCells: ICellsGridEvent[] = [];\r\n\r\n                tilesForDisplay.forEach(tileCell => {\r\n                    console.log('%c tileCell ', 'background-color: grey; color: blue;', tileCell);\r\n                    drawTileCell(ctx2d, tileCell, canvasSize, [cellW, cellH], cellBorderWidth);\r\n                });\r\n\r\n                clearing.forEach(({ cellNumber, point }) => {\r\n                    const isDisplayedOneLst = displaying.filter((t) => t.mouseType === MyCanvasMouseEvents.Click && t.cellNumber === cellNumber);\r\n                    // clear previous position!\r\n                    clearedCellNumberMap[cellNumber] = 1;\r\n                    if (!isDisplayedOneLst.length) {\r\n                        drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.BASE);\r\n                    }\r\n                });\r\n                highlightCells.forEach(({ cellNumber, point }) => {\r\n                    drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.SHOW_FILTERED_TILES);\r\n                });\r\n                displaying.forEach((t) => {\r\n                    const { cellNumber, mouseType, point } = t;\r\n                    // and then draw new hover position\r\n                    let color = mouseType === MyCanvasMouseEvents.Click ? BorderColors.SELECTED : BorderColors.HOVERED;\r\n                    if (displayedMap[cellNumber]) {\r\n                        // color = BorderColors.HOVER_SELECTED;\r\n                        displayHoverSelectedCells.push(t);\r\n                    } else {\r\n                        drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, color);\r\n                    }\r\n                    if (mouseType === MyCanvasMouseEvents.Click) displayedMap[cellNumber] = 2;\r\n                    if (mouseType === MyCanvasMouseEvents.Move) displayedMap[cellNumber] = 1;\r\n                });\r\n                displayHoverSelectedCells.forEach(({ cellNumber, point }) => {\r\n                    drawCellHovering(ctx2d, { cellNumber, point }, canvasSize, [cellW, cellH], cellBorderWidth, BorderColors.HOVER_SELECTED);\r\n                });\r\n            });\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [event$, canvas2dCtxInList$, cellW, cellH, cellBorderWidth, canvasSize]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default CellsGrid;","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\n\r\nimport ServiceContext from '../../contexts/ServiceContext';\r\n\r\nimport CanvasComponent from '../../components/Canvas';\r\n\r\nimport CellsGrid, { CellsGridEventData, ICellsGridEvent } from '../../components/CellsGrid';\r\nimport { getCellByClick } from '../../helpers/canvasMath';\r\nimport { IEventProps } from '../../helpers/IEventProps';\r\nimport { ICellData, ICellEventData, ITileState, MyCanvasMouseEvents, MyModes } from '../../interfaces/cells';\r\nimport { AccountAddr, EMPTY_ADDR, IDataService } from '../../services/interfaces';\r\n\r\n\r\nexport enum CellEventTypes {\r\n    None = 0,\r\n    Add = 1,\r\n    Remove = 2,\r\n    UpdateByContract = 3,\r\n    DisplayOwnCells = 4,\r\n    DisplayOtherCells = 5,\r\n    DisplayAll = 6,\r\n    UserUpdateTileGroup = 7\r\n}\r\n\r\nexport type NoneEvent = [CellEventTypes.None, ICellEventData[]];\r\nexport type AddTileEvent = [CellEventTypes.Add, ICellEventData[]];\r\nexport type RemoveTileInModifyModeEvent = [CellEventTypes.Remove, ITileState[]];\r\nexport type UpdateByContractEvent = [CellEventTypes.UpdateByContract, ICellEventData[]];\r\nexport type DisplayCellsEvent = [CellEventTypes.DisplayOwnCells, ICellEventData[]];\r\nexport type DisplayOtherEvent = [CellEventTypes.DisplayOtherCells, ICellEventData[]];\r\nexport type DisplayAllEvent = [CellEventTypes.DisplayAll, ICellEventData[]];\r\nexport type UserTilesSaveEvent = [CellEventTypes.UserUpdateTileGroup, ITileState[]];\r\n\r\nexport type CellsEvent =\r\n    | NoneEvent\r\n    | AddTileEvent\r\n    | RemoveTileInModifyModeEvent\r\n    | UpdateByContractEvent\r\n    | DisplayCellsEvent\r\n    | DisplayOtherEvent\r\n    | DisplayAllEvent\r\n    | UserTilesSaveEvent;\r\n\r\nexport interface ICellsLayoutProps extends IEventProps<ICellEventData[]> {\r\n    cellsUpdate$: Subject<CellsEvent>;\r\n    currentAcc$: BehaviorSubject<AccountAddr>;\r\n    cellsAmount: number;\r\n    cellSize: [number, number];\r\n    cellBorderWidth: number;\r\n    maxCanvasWidth: number;\r\n}\r\n\r\n\r\nconst MAP_CURR_CELL_EV_TO_CELL_GRID_EV = (t: ICellEventData, _i: number, _arr: ICellEventData[]): ICellsGridEvent => ({\r\n    cellNumber: t.curr.cellNumber,\r\n    point: t.curr.point,\r\n    mouseType: t.mouseType\r\n})\r\n\r\nconst Component = (props: ICellsLayoutProps) => {\r\n\r\n    const { cellSize, cellsAmount, cellBorderWidth, maxCanvasWidth, event$, cellsUpdate$, currentAcc$ } = props;\r\n\r\n    // TODO: MODE from props\r\n    const modeRef = useRef<MyModes>(MyModes.Buy);\r\n\r\n    // // TODO: currentAcc from props\r\n    // const currentAcc$ = useMemo(() => new BehaviorSubject<AccountAddr>('<test-account>' as AccountAddr), []);\r\n\r\n\r\n    const dataService = useContext(ServiceContext) as IDataService;\r\n\r\n    const [cellWidth, cellHeight] = cellSize;\r\n\r\n    const [sizeWithOuter, setSize] = useState<[number, number, boolean]>([0, 0, false]);\r\n    const boxRef = useRef<HTMLDivElement | null>(null);\r\n    const cellsLayoutSizeRef = useRef<[number, number]>([0, 0]);\r\n    const rowsDataRef = useRef<[number, number]>([0, 0]);\r\n\r\n    const filteredCellsRef = useRef<ICellsGridEvent[]>([]);\r\n\r\n    const cellTileUpdatesRef = useRef<{ [cellNumber: number]: number }>({});\r\n\r\n    const canvas2dCtxInList$ = useMemo(() => new BehaviorSubject<CanvasRenderingContext2D[]>([]), []);\r\n    const canvasMouseEvent$ = useMemo(() => new Subject<[MyCanvasMouseEvents, React.MouseEvent<HTMLCanvasElement, MouseEvent>]>(), []);\r\n\r\n\r\n    // [cells display] [cells clear] [tiles display] [tiles clear]\r\n    const cellsGridEvent$ = useMemo(() => new BehaviorSubject<CellsGridEventData>({\r\n        displayCells: [],\r\n        clearCells: [],\r\n        displayTiles: [],\r\n        clearTiles: [],\r\n        highlightCells: [],\r\n        shadeCells: []\r\n    }), []);\r\n\r\n    const contractTiles$ = useMemo(() => new BehaviorSubject<{ [id: number]: [number, ITileState] }>({}), []);\r\n\r\n    const [error, setError] = useState<[boolean, string | null]>([false, null]);\r\n\r\n    const onBoxRef = useCallback((el: HTMLDivElement | null) => {\r\n        if (el) {\r\n            const finalCellWidth = cellWidth;\r\n            const rectWidth = maxCanvasWidth;\r\n            // const rectWidth = width <= maxCanvasWidth ? width : maxCanvasWidth;\r\n            let inRow = Math.floor((rectWidth - cellBorderWidth) / (finalCellWidth + cellBorderWidth));\r\n            const finalWidth = (inRow + 1) * cellBorderWidth + inRow * finalCellWidth;\r\n            const rows = Math.ceil(cellsAmount / inRow);\r\n            const finalHeight = rows * cellHeight + rows * cellBorderWidth + cellBorderWidth;\r\n            boxRef.current = el;\r\n            rowsDataRef.current = [inRow, rows];\r\n            cellsLayoutSizeRef.current = [finalWidth, finalHeight];\r\n            setSize([\r\n                finalWidth,\r\n                finalHeight,\r\n                true,\r\n            ]);\r\n        }\r\n    }, [boxRef, cellsLayoutSizeRef, rowsDataRef, cellsAmount, cellBorderWidth, maxCanvasWidth, cellWidth, cellHeight]);\r\n\r\n    // useEffect(() => {\r\n    //     const sub = mode$.subscribe(mode => {\r\n    //     });\r\n    //     return () => sub.unsubscribe();\r\n    // }, [mode$]);\r\n\r\n    useEffect(() => {\r\n        // TODO: create async funcs outside, add it with mapping (like react-connect)\r\n        // 1. connect\r\n        // 2. start timer (5s asking smart-contract)\r\n        // 3. every count: get items (tiles)\r\n        // 4. compare items from service with items of state\r\n        // 5. new\\updated items display!\r\n        const sub = dataService.getState().subscribe(val => {\r\n            console.log('new state', { ...val });\r\n\r\n            const cellEventsRef = event$.getValue();\r\n\r\n            const updatesRef = cellTileUpdatesRef.current;\r\n            // TODO: too complex\r\n            const cellEventOfIndex = cellEventsRef.reduce((acc, t, i) => ({ ...acc, [t.curr.cellNumber]: i }), {} as { [id: number]: number });\r\n            const contractTilesData: { [id: number]: [number, ITileState]; } = {};\r\n            let isUpdateNeeds = false;\r\n            val.tileCells.forEach(tile => {\r\n                // new \\ updated Tile\r\n                console.log('tile', tile, cellEventOfIndex);\r\n                contractTilesData[tile.cellNumber] = [val.lastUpdate, { ...tile }];\r\n                if (!updatesRef[tile.cellNumber] || updatesRef[tile.cellNumber] < val.lastUpdate) {\r\n                    updatesRef[tile.cellNumber] = val.lastUpdate;\r\n                    if (cellEventOfIndex[tile.cellNumber] > 0) {\r\n                        // cellEventsRef[cellEventOfIndex[tile.cellNumber]].contractTile = { ...tile.tile };\r\n                        isUpdateNeeds = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (isUpdateNeeds) {\r\n                // event$.next([...cellEventsRef]);\r\n                cellsUpdate$.next([CellEventTypes.UpdateByContract, [...cellEventsRef]]);\r\n            }\r\n\r\n            // TODO: use [ Map<CellNumber, ITileState>, ITileState[] ] as [ aTilesMap, tilesForUpdate ]\r\n            contractTiles$.next({ ...contractTilesData });\r\n\r\n            // const cellEvents = event$.getValue().map<ICellEventData>(t => {\r\n            //     // const tile = val.tileCells\r\n            // });\r\n\r\n            let highlights: ICellsGridEvent[] = [];\r\n\r\n            if (modeRef.current === MyModes.Edit) {\r\n                highlights = val.tileCells\r\n                    .filter(t => t.tile && t.tile.owner === dataService.getAccount())\r\n                    .map<ICellsGridEvent>(t => ({\r\n                        cellNumber: t.cellNumber,\r\n                        mouseType: MyCanvasMouseEvents.None,\r\n                        point: t.point\r\n                    }));\r\n\r\n                filteredCellsRef.current = [...highlights];\r\n            }\r\n\r\n            cellsGridEvent$.next({\r\n                displayCells: [],\r\n                clearCells: [],\r\n                displayTiles: [...val.tileCells],\r\n                clearTiles: [],\r\n                highlightCells: [...highlights],\r\n                shadeCells: []\r\n            });\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [dataService, cellsGridEvent$, event$, filteredCellsRef, cellsUpdate$, contractTiles$, cellTileUpdatesRef, modeRef]);\r\n\r\n    useEffect(() => {\r\n        const sub = cellsUpdate$.subscribe((ev) => {\r\n            const evType = ev[0], payload = ev[1];\r\n            console.log('cellsUpdate$', evType, payload);\r\n\r\n            const cellEvents = event$.getValue();\r\n            if (evType === CellEventTypes.DisplayAll || evType === CellEventTypes.DisplayOwnCells) {\r\n                const unhighlightCells = evType === CellEventTypes.DisplayAll ? [...filteredCellsRef.current] : [];\r\n                modeRef.current = evType === CellEventTypes.DisplayAll ? MyModes.Buy : MyModes.Edit;\r\n                filteredCellsRef.current = (ev[1] as ICellEventData[]).map<ICellsGridEvent>(t => ({\r\n                    cellNumber: t.curr.cellNumber,\r\n                    point: t.curr.point,\r\n                    mouseType: MyCanvasMouseEvents.None\r\n                }));\r\n                const notHighlightedSelected = cellEvents\r\n                    .filter(t => t.mouseType === MyCanvasMouseEvents.Click\r\n                        && unhighlightCells.findIndex(x => x.cellNumber === t.curr.cellNumber) < 0)\r\n                    .map<ICellsGridEvent>(t => ({\r\n                        cellNumber: t.curr.cellNumber,\r\n                        point: t.curr.point,\r\n                        mouseType: t.mouseType\r\n                    }));\r\n                event$.next(cellEvents.filter(t => t.mouseType !== MyCanvasMouseEvents.Click));\r\n                // 1. display border of selected!\r\n                return cellsGridEvent$.next({\r\n                    displayCells: [], clearCells: [...unhighlightCells, ...notHighlightedSelected],\r\n                    displayTiles: [], clearTiles: [],\r\n                    highlightCells: [...filteredCellsRef.current],\r\n                    shadeCells: []\r\n                });\r\n            }\r\n\r\n            // TODO: update from contract event\r\n            if (evType === CellEventTypes.UpdateByContract) {\r\n                return;\r\n            }\r\n\r\n            if (evType === CellEventTypes.Remove) {\r\n\r\n                const afterRemoveCellEvents = cellEvents\r\n                    .filter(t => t.mouseType !== MyCanvasMouseEvents.Click || ev[1].findIndex(x => x.cellNumber === t.curr.cellNumber) < 0);\r\n\r\n\r\n                event$.next([...afterRemoveCellEvents]);\r\n\r\n                cellsGridEvent$.next({\r\n                    displayCells: afterRemoveCellEvents.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\r\n                    clearCells: ev[1].map<ICellsGridEvent>(t => ({ cellNumber: t.cellNumber, point: t.point, mouseType: MyCanvasMouseEvents.Click })),\r\n                    displayTiles: [],\r\n                    clearTiles: [],\r\n                    highlightCells: [],\r\n                    shadeCells: []\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            // const afterRemoveCellEvents = cellEvents\r\n            //     .filter(t => t.mouseType !== MyCanvasMouseEvents.Click || payload.findIndex(x => x.curr.cellNumber === t.curr.cellNumber) < 0);\r\n\r\n\r\n            // event$.next([...afterRemoveCellEvents]);\r\n\r\n            // cellsGridEvent$.next({\r\n            //     displayCells: afterRemoveCellEvents.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\r\n            //     clearCells: payload.map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\r\n            //     displayTiles: [],\r\n            //     clearTiles: [],\r\n            //     highlightCells: [],\r\n            //     shadeCells: []\r\n            // });\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [cellsUpdate$, event$, cellsGridEvent$, modeRef, filteredCellsRef]);\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            const sub = canvasMouseEvent$.subscribe(([evType, elem]) => {\r\n                const { clientX, clientY } = elem;\r\n                const { offsetLeft, offsetTop } = elem.currentTarget;\r\n\r\n                const [scrollLeft, scrollTop] = boxRef.current ? [boxRef.current.scrollLeft, boxRef.current.scrollTop] : [0, 0];\r\n\r\n                const cellEvents = event$.getValue();\r\n\r\n                // mouse out of grid layout\r\n                if ((clientX - offsetLeft + scrollLeft + cellBorderWidth >= cellsLayoutSizeRef.current[0]) ||\r\n                    (clientX <= offsetLeft) ||\r\n                    (clientY <= offsetTop) ||\r\n                    (clientY - offsetTop + scrollTop + cellBorderWidth >= cellsLayoutSizeRef.current[1])) {\r\n                    const selectedCellEvents = cellEvents.filter(t => t.mouseType !== MyCanvasMouseEvents.Move);\r\n                    cellsGridEvent$.next({\r\n                        displayCells: selectedCellEvents.map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\r\n                        clearCells: cellEvents\r\n                            .filter(t =>\r\n                                t.mouseType === MyCanvasMouseEvents.Move\r\n                                && filteredCellsRef.current.findIndex(ft => ft.cellNumber === t.curr.cellNumber) < 0\r\n                            )\r\n                            .map<ICellsGridEvent>(MAP_CURR_CELL_EV_TO_CELL_GRID_EV),\r\n                        displayTiles: [],\r\n                        clearTiles: [],\r\n                        highlightCells: [...filteredCellsRef.current],\r\n                        shadeCells: []\r\n                    });\r\n                    event$.next([...selectedCellEvents]);\r\n                    return;\r\n                }\r\n\r\n                const cellData = getCellByClick(\r\n                    clientX + scrollLeft - offsetLeft,\r\n                    clientY + scrollTop - offsetTop,\r\n                    { inRowCount: rowsDataRef.current[0], cellW: cellWidth + cellBorderWidth, cellH: cellHeight + cellBorderWidth }\r\n                );\r\n\r\n                const newCellData: ICellData = { cellNumber: cellData.cellNumber, point: [cellData.x, cellData.y] };\r\n\r\n\r\n                if (evType === MyCanvasMouseEvents.Move && !!cellEvents.find(t => t.mouseType === evType && t.curr.cellNumber === cellData.cellNumber)) {\r\n                    return;\r\n                }\r\n\r\n                // console.log('\\n\\n-----');\r\n                // console.log('cellEvents', [...cellEvents]);\r\n                // console.log('----- cellData -- ', cellData);\r\n\r\n                // 1        move to new cell (clear last, display new Hover)\r\n                // 2        click new cell (display new selected)\r\n                // 3        click on selected (clear selected, display hover)\r\n                // 4        move to selected (display Selected-Hover)\r\n                // 5        move on the same (no action)\r\n                // 6*        move Out (clear last --- ok)\r\n                //  remove from EVENT:  [ click twice on the same ]\r\n\r\n                const MODE = modeRef.current;\r\n                const CURRENT_ADDR = currentAcc$.getValue();\r\n                const contractTiles = contractTiles$.getValue();\r\n\r\n                let CLICK_TO_NEW_CELL = evType === MyCanvasMouseEvents.Click;\r\n                let ADD_NEW_MOVE_CELL = cellEvents.length && evType === MyCanvasMouseEvents.Move;\r\n\r\n                const EDIT_NOT_MINE_TILE_OE_EMPTY = MODE === MyModes.Edit && CLICK_TO_NEW_CELL &&\r\n                    (!contractTiles[newCellData.cellNumber] || contractTiles[newCellData.cellNumber][1].tile.owner !== CURRENT_ADDR);\r\n\r\n                if (EDIT_NOT_MINE_TILE_OE_EMPTY) CLICK_TO_NEW_CELL = false;\r\n                const result: { display: ICellsGridEvent[], clear: ICellsGridEvent[], finalCellEvents: ICellEventData[] } = {\r\n                    display: !cellEvents.length && !EDIT_NOT_MINE_TILE_OE_EMPTY ? [{ ...newCellData, mouseType: evType }] : [],\r\n                    clear: [],\r\n                    finalCellEvents: !cellEvents.length && !EDIT_NOT_MINE_TILE_OE_EMPTY ? [{ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } }] : []\r\n                };\r\n\r\n\r\n                cellEvents.forEach(t => {\r\n\r\n                    if (evType === MyCanvasMouseEvents.Click) {\r\n                        // console.log('%c cell event', 'background-color: darkcyan; color: white', t);\r\n                        // if MODE is EDIT and cell is not mine - skip!\r\n                        // if MODE is BUY and cell is mine - skip!\r\n                        // all above - if CURRENT_ADDR is not EMPTY\r\n                        // console.log('%c ev ', 'color: green', t, contractTiles[t.curr.cellNumber], CURRENT_ADDR);\r\n\r\n                        // click to new cell that is not mine or empty in EDIT MODE\r\n                        if (MODE === MyModes.Edit && t.mouseType === MyCanvasMouseEvents.Click && (!contractTiles[t.curr.cellNumber] || contractTiles[t.curr.cellNumber][1].tile.owner !== CURRENT_ADDR)) {\r\n                            CLICK_TO_NEW_CELL = false;\r\n                            return;\r\n                        }\r\n                        // click on another cell: display selected owned tiles!\r\n                        if (MODE === MyModes.Edit && t.mouseType === MyCanvasMouseEvents.Click && !EDIT_NOT_MINE_TILE_OE_EMPTY) {\r\n                            if (t.curr.cellNumber !== newCellData.cellNumber) {\r\n                                result.display.push({ ...t.curr, mouseType: t.mouseType });\r\n                            }\r\n                        }\r\n                        // TODO: click for BUYING on empty cell - is OK (yet)\r\n                        // console.log('t.contractTile is buy', t.curr.cellNumber);\r\n                        // console.log('t.contractTile is CURRENT_ADDR', CURRENT_ADDR, contractTiles[t.curr.cellNumber]);\r\n                        // console.log('t.contractTile is owner', contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner);\r\n                        // console.log('t.contractTile is owner == myAddr', contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner === CURRENT_ADDR);\r\n                        if (MODE === MyModes.Buy && t.mouseType === MyCanvasMouseEvents.Click && contractTiles[t.curr.cellNumber] && contractTiles[t.curr.cellNumber][1].tile.owner === CURRENT_ADDR) {\r\n                            return;\r\n                        }\r\n\r\n                        if (MODE === MyModes.Buy) {\r\n                            // click on new [ NON-EDIT mode ] \r\n                            // - ignore selected (only one selected is allowed)\r\n                            if (t.curr.cellNumber !== newCellData.cellNumber) {\r\n                                result.clear.push({ ...t.curr, mouseType: evType });\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType === evType) {\r\n                            CLICK_TO_NEW_CELL = false;\r\n                            // 3:  click on selected (clear selected, display hover)\r\n                            result.clear.push({ ...t.curr, mouseType: evType });\r\n                            // no display hover (click on hover Code [3*] do that)\r\n                            return;\r\n                        }\r\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType !== evType) {\r\n                            // 3*   click on hovered (display move cell)\r\n                            result.display.push({ ...newCellData, mouseType: MyCanvasMouseEvents.Move });\r\n                        }\r\n                        result.finalCellEvents.push({ ...t });\r\n                    }\r\n                    if (evType === MyCanvasMouseEvents.Move) {\r\n                        if (t.mouseType === evType && t.curr.cellNumber === newCellData.cellNumber) {\r\n                            ADD_NEW_MOVE_CELL = false;\r\n                            // 5:  move on the same (no display, no clear)\r\n                            result.finalCellEvents.push({ ...t });\r\n                            return;\r\n                        }\r\n                        if (t.curr.cellNumber === newCellData.cellNumber && t.mouseType === MyCanvasMouseEvents.Click) {\r\n                            // 4:  move to selected (display Selected-Hover)\r\n                            result.finalCellEvents.push({ ...t });\r\n                            result.display.push({ ...t.curr, mouseType: t.mouseType });\r\n                            return;\r\n                        }\r\n                        if (t.mouseType === evType && t.curr.cellNumber !== newCellData.cellNumber) {\r\n                            ADD_NEW_MOVE_CELL = false;\r\n                            // 1:  move to new cell (clear last, display new Hover)\r\n                            //     move to new cell\r\n                            result.clear.push({ ...t.curr, mouseType: evType });\r\n                            result.finalCellEvents.push({ mouseType: t.mouseType, lastCell: { ...t.curr }, curr: { ...newCellData } });\r\n                            //     display new Hover\r\n                            result.display.push({ ...newCellData, mouseType: evType });\r\n                            return;\r\n                        }\r\n                        result.finalCellEvents.push({ ...t });\r\n                        result.display.push({ ...t.curr, mouseType: t.mouseType });\r\n                    }\r\n                });\r\n\r\n                if (ADD_NEW_MOVE_CELL) {\r\n                    // move on new cell first time\r\n                    result.finalCellEvents.push({ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } });\r\n                    result.display.push({ ...newCellData, mouseType: evType });\r\n                }\r\n                if (CLICK_TO_NEW_CELL) {\r\n                    // 2:  click new cell (display new selected)\r\n                    if (MODE === MyModes.Buy && contractTiles[newCellData.cellNumber] && contractTiles[newCellData.cellNumber][1].tile.owner === CURRENT_ADDR) {\r\n                        return;\r\n                    }\r\n                    result.finalCellEvents.push({ mouseType: evType, lastCell: { cellNumber: -1, point: [0, 0] }, curr: { ...newCellData } });\r\n                    result.display.push({ ...newCellData, mouseType: evType });\r\n                }\r\n                if (evType === MyCanvasMouseEvents.Click) {\r\n                    if (EDIT_NOT_MINE_TILE_OE_EMPTY) {\r\n                        result.finalCellEvents = result.finalCellEvents.filter(\r\n                            t => t.mouseType !== MyCanvasMouseEvents.Click\r\n                        );\r\n                    }\r\n                    console.log('final res', CLICK_TO_NEW_CELL, { ...result });\r\n                }\r\n                if (result.display.length || result.clear.length) {\r\n                    cellsGridEvent$.next({\r\n                        displayCells: [...result.display],\r\n                        clearCells: result.clear.filter(t => filteredCellsRef.current.findIndex(ft => ft.cellNumber === t.cellNumber) < 0),\r\n                        displayTiles: [],\r\n                        clearTiles: [],\r\n                        highlightCells: filteredCellsRef.current.filter(t => result.display.findIndex(ct => ct.cellNumber === t.cellNumber) < 0),\r\n                        shadeCells: []\r\n                    });\r\n                }\r\n                if (evType === MyCanvasMouseEvents.Click) {\r\n                    console.log('\\nresult', { ...result });\r\n                }\r\n                event$.next([...result.finalCellEvents]);\r\n            });\r\n\r\n            return () => sub.unsubscribe();\r\n\r\n        },\r\n        [\r\n            boxRef,\r\n            cellsLayoutSizeRef,\r\n            rowsDataRef,\r\n            event$,\r\n            modeRef,\r\n            contractTiles$,\r\n            currentAcc$,\r\n            cellsGridEvent$,\r\n            canvasMouseEvent$,\r\n            filteredCellsRef,\r\n            cellBorderWidth,\r\n            cellWidth,\r\n            cellHeight\r\n        ]\r\n    );\r\n\r\n    return (\r\n        <div id=\"cells-body\" className=\"overflow\" ref={ onBoxRef }>\r\n            <CanvasComponent\r\n                width={ sizeWithOuter[0] }\r\n                height={ sizeWithOuter[1] }\r\n                canvas2dCtxInList$={ canvas2dCtxInList$ }\r\n                event$={ canvasMouseEvent$ }\r\n            />\r\n            {\r\n                sizeWithOuter[0] &&\r\n                sizeWithOuter[1] &&\r\n                <CellsGrid\r\n                    event$={ cellsGridEvent$ }\r\n                    canvas2dCtxInList$={ canvas2dCtxInList$ }\r\n                    amount={ cellsAmount }\r\n                    cellW={ cellSize[0] }\r\n                    cellH={ cellSize[1] }\r\n                    cellBorderWidth={ cellBorderWidth }\r\n                    canvasSize={ [sizeWithOuter[0], sizeWithOuter[1]] }\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Component;","import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\nimport Button from '../../components/Button';\r\nimport Input from '../../components/Input';\r\nimport Modal from '../../components/Modal';\r\nimport { CartEvents, TilesEventCart, ICellEventData, IUnmintedTileState } from '../../interfaces/cells';\r\n\r\nexport interface ICartModalProps {\r\n    event$: Subject<TilesEventCart>;\r\n}\r\n\r\nenum CartOpenTypes {\r\n    None = 0,\r\n    BuyCellsMode = 1,\r\n    ModifyCellsMode = 2,\r\n}\r\n\r\ntype StateWithOpenVariant = [true, ICellEventData[]];\r\ntype StateWithCloseVariant = [false];\r\ntype StateWithOpenStatus = StateWithOpenVariant | StateWithCloseVariant;\r\n\r\nconst CartModal = (props: ICartModalProps) => {\r\n    const { event$ } = props;\r\n    const modalEvent$ = useMemo(() => new Subject(), []);\r\n    const remove$ = useMemo(() => new Subject<IUnmintedTileState>(), []);\r\n    const cartEvent$ = useMemo(() => new Subject<TilesEventCart>(), []);\r\n\r\n    const [tilesState, setTilesState] = useState<[CartOpenTypes, IUnmintedTileState[]]>([CartOpenTypes.None, []]);\r\n    const tilesRef = useRef<IUnmintedTileState[]>([]);\r\n\r\n    const groupAvatarUrl = tilesState[1].reduce<string>((acc, t) => {\r\n        if (!t.tile) return acc;\r\n        if (acc && t.tile.url) return '';\r\n        return t.tile.url || acc;\r\n    }, '');\r\n\r\n    const input$ = useMemo(() => new BehaviorSubject<[string, any]>([groupAvatarUrl || '', null]), [groupAvatarUrl]);\r\n    // const [state, setState] = useState<StateWithOpenStatus>([false]);\r\n    // const stateRef = useRef<ICellEventData[]>(state[1] || []);\r\n    useEffect(() => {\r\n        const launcherSub = event$.subscribe(val => {\r\n            console.log('%c event$ in cart-modal: ', 'border: 1px solid green', val, input$.getValue());\r\n            // if (val.type === CartEvents.Open) {\r\n            //     stateRef.current = [...val.payload];\r\n            //     setState([true, [...val.payload]]);\r\n            //     setTilesState([false, []]);\r\n            // }\r\n            if (val.type === CartEvents.Modify || val.type === CartEvents.Open) {\r\n                input$.next(['', null]);\r\n                tilesRef.current = [...val.payload];\r\n                setTilesState([val.type === CartEvents.Modify ? CartOpenTypes.ModifyCellsMode : CartOpenTypes.BuyCellsMode, [...val.payload]]);\r\n                cartEvent$.next(val);\r\n            }\r\n        });\r\n        const sub = cartEvent$.subscribe((val) => {\r\n            console.log('cart event', val, [...tilesRef.current]);\r\n            if ([CartEvents.Close, CartEvents.Save, CartEvents.Buy].includes(val.type)) {\r\n                if (val.type === CartEvents.Buy) {\r\n                    if (tilesRef.current.length) {\r\n                        event$.next({\r\n                            type: CartEvents.Buy,\r\n                            payload: tilesRef.current.map(t => ({ ...t })),\r\n                            groupUrl: input$.getValue()[0]\r\n                        });\r\n                    }\r\n                } else if (val.type === CartEvents.Save) {\r\n                    if (tilesRef.current.length) {\r\n                        event$.next({\r\n                            type: CartEvents.SaveTiles,\r\n                            payload: [...tilesRef.current],\r\n                            groupUrl: input$.getValue()[0]\r\n                        });\r\n                    } else {\r\n                        event$.next(val);\r\n                    }\r\n                }\r\n                tilesRef.current = [];\r\n                input$.next(['', null]);\r\n                setTilesState([CartOpenTypes.None, []]);\r\n            }\r\n\r\n            if (val.type === CartEvents.RemoveItems) {\r\n                tilesRef.current = tilesRef.current.filter(t => val.payload.findIndex(x => x.cellNumber === t.cellNumber) < 0);\r\n                setTilesState([CartOpenTypes.ModifyCellsMode, [...tilesRef.current]]);\r\n                event$.next(val);\r\n            }\r\n        });\r\n        return () => {\r\n            launcherSub.unsubscribe();\r\n            sub.unsubscribe();\r\n        };\r\n    }, [event$, modalEvent$, tilesRef, input$]);\r\n\r\n    useEffect(() => {\r\n        const sub = remove$.subscribe((val) => {\r\n            console.log('remove >', val);\r\n            cartEvent$.next({ type: CartEvents.RemoveItems, payload: [{ ...val }], groupUrl: '' });\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [event$, remove$]);\r\n\r\n    console.log('state CartModal: ', tilesState);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                <Modal title=\"Crypto tiles\" width={ 770 } height={ 450 } event$={ cartEvent$ } open={ tilesState[0] !== CartOpenTypes.None }>\r\n                    <div className=\"flex-cnt item wrap content-start overflow px-2\">\r\n                        {\r\n                            tilesState[0] === CartOpenTypes.ModifyCellsMode && <div className=\"flex-cnt item wrap fb-10 px-2 my-2\">\r\n                                <Button color=\"secondary\" noActive title={ tilesState[1].length > 1 ? 'group url' : \"url\" } small />\r\n                                <Input event$={ input$ } value={ groupAvatarUrl } />\r\n                            </div>\r\n                        }\r\n                        <div className=\"flex-cnt item justify-start fb-10 wrap px-2 py-3\">\r\n                            {\r\n                                tilesState[0] === CartOpenTypes.ModifyCellsMode && tilesState[1].length > 1 && <div className=\"flex-cnt item fb-10 my-2\">\r\n                                    <Button color=\"secondary\" noActive title=\"group tiles\" small />\r\n                                </div>\r\n                            }\r\n                            {\r\n                                tilesState[0] === CartOpenTypes.ModifyCellsMode && tilesState[1].map(cellData =>\r\n                                    <div\r\n                                        key={ cellData.cellNumber }\r\n                                        className=\"flex-cnt item wrap fb-2 align-center shrink mx-1 px-3 py-1\"\r\n                                        style={ { marginBottom: 8, backgroundColor: 'white' } }\r\n                                    >\r\n                                        <div className=\"flex-cnt item fb-4 modal_cell-item\">{ cellData.cellNumber + 1 }</div>\r\n                                        <div className=\"flex-cnt item fb-3 justify-end\">\r\n                                            <Button action={ cellData } light color=\"error\" title=\"X\" small event$={ remove$ } />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            {\r\n                                tilesState[0] === CartOpenTypes.BuyCellsMode && <div className=\"flex-cnt item wrap justify-start fb-10\">\r\n                                    {\r\n                                        tilesState[1].map(cellData =>\r\n                                            <div\r\n                                                key={ cellData.cellNumber }\r\n                                                className=\"flex-cnt item wrap fb-10 align-center shrink mx-1 px-3 py-1\"\r\n                                                style={ { marginBottom: 8, backgroundColor: 'white' } }\r\n                                            >\r\n                                                <div className=\"flex-cnt item fb-4 shrink\">\r\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"price (Eth)\" small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item justify-end fb-4\">\r\n                                                    <Button color=\"info\" noActive title={ '# ' + cellData.cellNumber + 1 } small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\r\n                                                    <Input noActive color=\"header\" value={ cellData.token ? '' + cellData.token.price : '' } />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item fb-4 shrink\">\r\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"image url\" small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item fb-10 mt-1 mb-4\">\r\n                                                    <Input event$={ input$ } noActive={ !!cellData.tile } value={ cellData.tile ? cellData.tile.url || '' : '' } />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item fb-4 shrink\">\r\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"title\" small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\r\n                                                    <Input noActive color=\"header\" value={ cellData.tile ? '' + cellData.tile.title : '' } />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item fb-4 shrink\">\r\n                                                    <Button color=\"close\" textAlign=\"left\" noActive title=\"bounded tiles\" small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item shrink fb-10 wrap\">\r\n                                                    {\r\n                                                        cellData.tile &&\r\n                                                        cellData.tile.boundedTiles.map(x =>\r\n                                                            <div key={ x.toString() } className=\"flex-cnt item shrink my-1 mx-2\">\r\n                                                                <Button color=\"base\" noActive title={ x.toString() } small />\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item fb-4 mt-4 shrink\">\r\n                                                    <Button color=\"close\" textAlign=\"center\" noActive title=\"owner address\" small />\r\n                                                </div>\r\n                                                <div className=\"flex-cnt item shrink fb-10 mt-1 mb-4\">\r\n                                                    <Input noActive color=\"header\" value={ cellData.tile ? '' + cellData.tile.owner : '' } />\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartModal;","import CellsLayout from './CellsLayout';\r\n\r\nexport default CellsLayout;","import React, { PropsWithChildren, useCallback, useState } from 'react';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\n\r\n\r\nexport interface IInputProps<T = any> {\r\n    title?: string;\r\n    value?: string;\r\n    action?: T;\r\n    noActive?: boolean;\r\n    light?: boolean;\r\n    small?: boolean;\r\n    color?: 'header' | 'base' | 'active' | 'primary' | 'secondary' | 'info' | 'error' | 'close';\r\n    event$?: Subject<[string, T]>;\r\n}\r\n\r\nconst Input = (props: PropsWithChildren<IInputProps>) => {\r\n    const { value, event$, noActive, light, small, color, action } = props;\r\n    const [state, setState] = useState(value || '');\r\n    const onChangeHandler = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {\r\n        setState(event.currentTarget.value);\r\n        event$ && event$.next([event.currentTarget.value, action]);\r\n    }, [event$, action]);\r\n\r\n    const modifiersTxt = [noActive && 'no-action', light && 'light', small && 'small', color].filter(Boolean).map(t => `text-input--${t}`);\r\n    return (\r\n        <div className={ ['text-input', ...modifiersTxt].join(' ') }>\r\n            <input type=\"text\" value={ state } onChange={ onChangeHandler } disabled={ noActive } />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React, { PropsWithChildren, useEffect, useState } from 'react';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\nimport { CartEvents, TilesEventCart } from '../interfaces/cells';\r\nimport Button from './Button';\r\n\r\n\r\nexport interface IModalProps {\r\n    title: string;\r\n    width: number;\r\n    height: number;\r\n    event$: Subject<TilesEventCart>;\r\n    open: boolean;\r\n}\r\n\r\nconst Modal = (props: PropsWithChildren<IModalProps>) => {\r\n    const { title, width, height, event$, open } = props;\r\n    const [state, setState] = useState<TilesEventCart>({ type: CartEvents.Close, payload: [], groupUrl: '' });\r\n    useEffect(() => {\r\n        console.log('useEffect in modal....');\r\n        const sub = event$.subscribe(ev => {\r\n            console.log('ev in modal: ', ev);\r\n            if ([CartEvents.Modify, CartEvents.Open].includes(ev.type)) setState(ev);\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [event$]);\r\n\r\n    console.log('Modal state', state);\r\n\r\n    if (!open) return null;\r\n\r\n    const ifNewCell = !!state.payload.filter(t => !t.token && !t.tile).length;\r\n    let BTN_TITLE = state && state.type === CartEvents.Modify ? \"Save\" : \"Buy\";\r\n    BTN_TITLE = state && state.type === CartEvents.Open ? \"Buy\" : BTN_TITLE;\r\n    BTN_TITLE = ifNewCell ? 'Mint' : BTN_TITLE;\r\n\r\n    const EV_NAME = state && state.type === CartEvents.Open || ifNewCell ? CartEvents.Buy : CartEvents.Save;\r\n\r\n    return (\r\n        <div id=\"modal-overlay-cnt\">\r\n            <div id=\"modal-cnt\" style={ { width, height, top: '25%', marginLeft: -0.5 * width } }>\r\n                <div className=\"header\">\r\n                    <Button light color=\"header\" noActive title={ title } />\r\n                    <div className=\"flex-cnt\">\r\n                        <Button\r\n                            event$={ event$ }\r\n                            action={ { type: EV_NAME, payload: [] } }\r\n                            light\r\n                            color=\"active\"\r\n                            title={ BTN_TITLE } />\r\n                        <div className=\"flex-cnt item mx-1\"></div>\r\n                        <Button\r\n                            event$={ event$ }\r\n                            action={ { type: CartEvents.Close, payload: [] } }\r\n                            light\r\n                            color=\"close\"\r\n                            title=\"Close\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">{ props.children }</div>\r\n                <div className=\"footer\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","export default {\r\n    apiKey: \"AIzaSyD8Ad1yitALcRL8lBafsDVB3cqWXl4r0hY\",\r\n    authDomain: \"tiles-c734c.firebaseapp.com\",\r\n    projectId: \"tiles-c734c\",\r\n    storageBucket: \"tiles-c734c.appspot.com\",\r\n    messagingSenderId: \"895094851367\",\r\n    appId: \"1:895094851367:web:e231bfb9953e7edc350b02\"\r\n};","import { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\r\nimport { ITileState, IUnmintedTileState } from \"../interfaces/cells\";\r\n\r\nexport type AccountAddr = string & { _TYPE_: \"AccountAddr\" };\r\nexport type ContractTokenID = number & { _TYPE_: \"ContractTokenID\" };\r\nexport type ContractTileID = number & { _TYPE_: \"ContractTileID\" };\r\n\r\nexport const EMPTY_ADDR = \"<no-account>\" as AccountAddr;\r\n\r\nexport type ContractTileInfo = {\r\n    _id: any;\r\n    id: ContractTileID;\r\n    owner: AccountAddr;\r\n    tokenId: ContractTokenID;\r\n    url: string;\r\n    title: string;\r\n    boundedTiles: ContractTileID[];\r\n};\r\n\r\nexport type ContractTokenInfo = {\r\n    _id: any;\r\n    id: ContractTokenID;\r\n    owner: AccountAddr;\r\n    price: string;\r\n    url?: string;\r\n};\r\n\r\nexport type DataServiceState = {\r\n    tileCells: ITileState[];\r\n    lastUpdate: number;\r\n}\r\n\r\nexport interface IDataService {\r\n    connect(): Promise<boolean>;\r\n    getState(): BehaviorSubject<DataServiceState>;\r\n    getAccount(): AccountAddr | null;\r\n    getTileInfo(id: ContractTileID): Promise<ContractTileInfo | undefined>;\r\n    fetchTokenInfo(id: ContractTokenID): Promise<ContractTokenInfo>;\r\n    fetchTiles(): Promise<ContractTileInfo[]>;\r\n    groupTiles(tiles: ITileState[], groupUrl: string): Promise<[boolean, string]>;\r\n    buyTiles(tiles: ITileState[], url: string): Promise<[boolean, string]>;\r\n    mintTiles(tiles: IUnmintedTileState[], groupUrl: string): Promise<[boolean, string]>;\r\n}","import { getPointByCellNumber } from \"../helpers/canvasMath\";\r\nimport { ITileState } from \"../interfaces/cells\";\r\nimport { ContractTileInfo, ContractTokenInfo } from \"./interfaces\";\r\n\r\nexport const fromContractTile = (tile: ContractTileInfo, token: ContractTokenInfo): ITileState => {\r\n    return {\r\n        tile,\r\n        token,\r\n        cellNumber: tile.id,\r\n        point: getPointByCellNumber(tile.id)\r\n    }\r\n};","import { FirebaseApp, initializeApp } from \"firebase/app\";\r\nimport { getFirestore, collection, getDocs, getDoc, updateDoc, addDoc, Firestore, CollectionReference, doc } from 'firebase/firestore/lite';\r\nimport testFirebaseConfig from './testDbConfig';\r\n\r\nimport { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\r\nimport { ITileState, IUnmintedTileState } from \"../interfaces/cells\";\r\nimport {\r\n    AccountAddr,\r\n    ContractTileID,\r\n    ContractTileInfo,\r\n    ContractTokenID,\r\n    ContractTokenInfo,\r\n    DataServiceState,\r\n    EMPTY_ADDR,\r\n    IDataService\r\n} from \"./interfaces\";\r\nimport { fromContractTile } from \"./mappers\";\r\n\r\nconst TEST_OWNER_ADDR = \"test-owner-2\" as AccountAddr;\r\n// const TEST2_OWNER_ADDR = \"<test2-account>\" as AccountAddr;\r\n// const TEST3_OWNER_ADDR = \"<test3-account>\" as AccountAddr;\r\n// const TEST4_OWNER_ADDR = \"<test4-account>\" as AccountAddr;\r\n\r\n// const TILE_ID_1 = 1 as ContractTileID;\r\n// const TILE_ID_2 = 2 as ContractTileID;\r\n// const TILE_ID_3 = 3 as ContractTileID;\r\n// const TILE_ID_4 = 4 as ContractTileID;\r\n// const TILE_ID_5 = 5 as ContractTileID;\r\n// const TILE_ID_6 = 6 as ContractTileID;\r\n\r\n// const TILE_ID_140 = 140 as ContractTileID;\r\n// const TILE_ID_141 = 141 as ContractTileID;\r\n// const TILE_ID_142 = 142 as ContractTileID;\r\n// const TILE_ID_143 = 143 as ContractTileID;\r\n// const TILE_ID_144 = 144 as ContractTileID;\r\n// const TILE_ID_145 = 145 as ContractTileID;\r\n\r\n// const TILE_ID_165 = 165 as ContractTileID;\r\n// const TILE_ID_166 = 166 as ContractTileID;\r\n// const TILE_ID_167 = 167 as ContractTileID;\r\n// const TILE_ID_168 = 168 as ContractTileID;\r\n// const TILE_ID_169 = 169 as ContractTileID;\r\n// const TILE_ID_170 = 170 as ContractTileID;\r\n\r\n// const TILE_ID_190 = 190 as ContractTileID;\r\n// const TILE_ID_191 = 191 as ContractTileID;\r\n// const TILE_ID_192 = 192 as ContractTileID;\r\n// const TILE_ID_193 = 193 as ContractTileID;\r\n// const TILE_ID_194 = 194 as ContractTileID;\r\n// const TILE_ID_195 = 195 as ContractTileID;\r\n\r\n// const TOKEN_ID_1 = 1 as ContractTokenID;\r\n// const TOKEN_ID_2 = 2 as ContractTokenID;\r\n// const TOKEN_ID_3 = 3 as ContractTokenID;\r\n// const TOKEN_ID_4 = 4 as ContractTokenID;\r\n// const TOKEN_ID_5 = 5 as ContractTokenID;\r\n// const TOKEN_ID_6 = 6 as ContractTokenID;\r\n\r\n// const TEST_URLS: any = {\r\n//     1: 'https://seeklogo.com/images/S/starcraft-2-logo-A2A8CE895F-seeklogo.com.png',\r\n//     2: 'https://static10.tgstat.ru/channels/_0/8d/8d2631d77881c519b2d109c05eaa9d2b.jpg',\r\n//     // 1200x600\r\n//     5: 'https://bnetcmsus-a.akamaihd.net/cms/blog_header/ci/CIGT53U8ZP6M1509744317189.jpg',\r\n// };\r\n\r\n// let BOUNDS_FOR_140 = [\r\n//     TILE_ID_140,\r\n//     TILE_ID_141,\r\n//     TILE_ID_142,\r\n//     TILE_ID_143,\r\n//     TILE_ID_144,\r\n//     TILE_ID_145,\r\n\r\n//     TILE_ID_165,\r\n//     TILE_ID_166,\r\n//     TILE_ID_167,\r\n//     TILE_ID_168,\r\n//     TILE_ID_169,\r\n//     // TILE_ID_170,\r\n\r\n//     TILE_ID_190,\r\n//     // TILE_ID_191,\r\n//     TILE_ID_192,\r\n//     TILE_ID_193,\r\n//     TILE_ID_194,\r\n//     TILE_ID_195,\r\n// ];\r\n\r\n// // let TEST_TILES: ContractTileInfo[] = [\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: TILE_ID_1,\r\n// //         owner: TEST_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_1,\r\n// //         title: 'test 1st tile',\r\n// //         url: TEST_URLS[1],\r\n// //         boundedTiles: []\r\n// //     },\r\n// //     {\r\n// //         _id: 2,\r\n// //         id: TILE_ID_2,\r\n// //         owner: TEST_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_2,\r\n// //         title: 'test 1st tile',\r\n// //         url: TEST_URLS[2],\r\n// //         boundedTiles: []\r\n// //     },\r\n// //     {\r\n// //         _id: 5,\r\n// //         id: TILE_ID_5,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_5,\r\n// //         title: 'test 2nd tile',\r\n// //         url: TEST_URLS[5],\r\n// //         boundedTiles: [TILE_ID_5, TILE_ID_6]\r\n// //     },\r\n// //     {\r\n// //         _id: 6,\r\n// //         id: TILE_ID_6,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: [TILE_ID_5, TILE_ID_6]\r\n// //     },\r\n// //     {\r\n// //         _id: 321,\r\n// //         id: 321 as ContractTileID,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: 321 as ContractTokenID,\r\n// //         title: 'test 3d tile',\r\n// //         url: TEST_URLS[321],\r\n// //         boundedTiles: []\r\n// //     },\r\n\r\n// //     {\r\n// //         _id: 140,\r\n// //         id: TILE_ID_140,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_5,\r\n// //         title: 'test 2nd tile',\r\n// //         url: TEST_URLS[5],\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     {\r\n// //         _id: 141,\r\n// //         id: TILE_ID_141,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     {\r\n// //         _id: 142,\r\n// //         id: TILE_ID_142,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     {\r\n// //         _id: 143,\r\n// //         id: TILE_ID_143,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n\r\n// //     {\r\n// //         _id: 165,\r\n// //         id: TILE_ID_165,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_5,\r\n// //         title: 'test 2nd tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     {\r\n// //         _id: 166,\r\n// //         id: TILE_ID_166,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     {\r\n// //         _id: 167,\r\n// //         id: TILE_ID_167,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         tokenId: TOKEN_ID_6,\r\n// //         title: 'test 3d tile',\r\n// //         url: '',\r\n// //         boundedTiles: BOUNDS_FOR_140\r\n// //     },\r\n// //     // {\r\n// //     //     id: TILE_ID_168,\r\n// //     //     owner: TEST2_OWNER_ADDR,\r\n// //     //     tokenId: TOKEN_ID_6,\r\n// //     //     title: 'test 3d tile',\r\n// //     //     url: '',\r\n// //     //     boundedTiles: BOUNDS_FOR_140\r\n// //     // },\r\n\r\n// // ];\r\n\r\n// // let TOKENS: ContractTokenInfo[] = [\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: TOKEN_ID_1,\r\n// //         owner: TEST_OWNER_ADDR,\r\n// //         price: '1.2',\r\n// //         url: ''\r\n// //     },\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: TOKEN_ID_2,\r\n// //         owner: TEST_OWNER_ADDR,\r\n// //         price: '1.0',\r\n// //         url: ''\r\n// //     },\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: TOKEN_ID_5,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         price: '2.0',\r\n// //         url: ''\r\n// //     },\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: TOKEN_ID_6,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         price: '2.0',\r\n// //         url: ''\r\n// //     },\r\n// //     {\r\n// //         _id: 1,\r\n// //         id: 321 as ContractTokenID,\r\n// //         owner: TEST2_OWNER_ADDR,\r\n// //         price: '1.0',\r\n// //         url: ''\r\n// //     },\r\n// // ];\r\n\r\n\r\nconst ERROR_TOKEN: ContractTokenInfo = {\r\n    _id: 1,\r\n    id: -1 as ContractTokenID,\r\n    owner: EMPTY_ADDR,\r\n    price: '',\r\n    url: ''\r\n};\r\n\r\n// boundedTiles: \"2,3\"\r\n// description: \"\"\r\n// id: \"2\"\r\n// owner: \"test-owner-1\"\r\n// params: \"\"\r\n// title: \"sc2\"\r\n// tokenId: \"2\"\r\n// url:\r\n\r\nconst tileToFirebaseMapper = (item: ContractTileInfo): any => {\r\n    const idPart = item._id ? { _id: item._id } : {};\r\n    return {\r\n        ...idPart,\r\n        id: '' + item.id,\r\n        owner: item.owner,\r\n        tokenId: '' + item.tokenId,\r\n        title: item.title,\r\n        url: item.url,\r\n        boundedTiles: item.boundedTiles ? item.boundedTiles.map(t => '' + t).join(',') : ''\r\n    };\r\n};\r\n\r\nconst tileFirebaseMapper = (item: any): ContractTileInfo => {\r\n    return {\r\n        _id: item._id,\r\n        id: (Number(item.id)) as ContractTileID,\r\n        owner: item.owner,\r\n        tokenId: (Number(item.tokenId)) as ContractTokenID,\r\n        title: item.title,\r\n        url: item.url,\r\n        boundedTiles: item.boundedTiles ? ('' + item.boundedTiles).split(',').map(t => (Number(t)) as ContractTileID) : []\r\n    };\r\n};\r\n\r\nconst tokenFirebaseMapper = (item: any): ContractTokenInfo => {\r\n    return {\r\n        _id: item._id,\r\n        id: (Number(item.id)) as ContractTokenID,\r\n        owner: '' as AccountAddr,\r\n        price: item.price,\r\n        url: ''\r\n    };\r\n};\r\n\r\nconst tokenToFirebaseMapper = (item: ContractTokenInfo): any => {\r\n    const idPart = item._id ? { _id: item._id } : {};\r\n    return {\r\n        ...idPart,\r\n        id: (Number(item.id)) as ContractTokenID,\r\n        owner: '' as AccountAddr,\r\n        price: item.price,\r\n        url: ''\r\n    };\r\n};\r\n\r\nexport default class DataService implements IDataService {\r\n    private _account: AccountAddr | null = null;\r\n    private _state: BehaviorSubject<DataServiceState> = new BehaviorSubject<DataServiceState>({\r\n        lastUpdate: 0,\r\n        tileCells: []\r\n    });\r\n    private _firebaseApp: FirebaseApp;\r\n    private _db: Firestore;\r\n    private _tilesCollection: CollectionReference;\r\n    private _tokensCollection: CollectionReference;\r\n    constructor() {\r\n        this._firebaseApp = initializeApp(testFirebaseConfig);\r\n        this._db = getFirestore(this._firebaseApp);\r\n        this._tilesCollection = collection(this._db, 'tiles');\r\n        this._tokensCollection = collection(this._db, 'tokens');\r\n    }\r\n    getState(): BehaviorSubject<DataServiceState> {\r\n        return this._state;\r\n    }\r\n    connect(): Promise<boolean> {\r\n        this._account = TEST_OWNER_ADDR;\r\n        return new Promise(resolve => setTimeout(() => resolve(true), 2000));\r\n    }\r\n    getAccount(): AccountAddr | null {\r\n        return this._account;\r\n    }\r\n    async getTileInfo(id: ContractTileID): Promise<ContractTileInfo | undefined> {\r\n        try {\r\n            const result = await getDoc(doc(this._db, 'tiles', '' + id));\r\n            return tileFirebaseMapper({ ...result.data(), _id: result.id });\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async fetchTokenInfo(id: ContractTokenID): Promise<ContractTokenInfo> {\r\n        try {\r\n            const result = await getDoc(doc(this._db, 'tokens', '' + id));\r\n            return tokenFirebaseMapper({ ...result.data(), _id: result.id });\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    protected async fetchTokensByIds(ids: ContractTokenID[]): Promise<ContractTokenInfo[]> {\r\n        return Promise.all(ids.map(tokenId => this.fetchTokenInfo(tokenId)));\r\n    }\r\n\r\n    async fetchTiles(): Promise<ContractTileInfo[]> {\r\n\r\n        try {\r\n            const [tilesSnapshot, tokesSnapshot] = await Promise.all([getDocs(this._tilesCollection), getDocs(this._tokensCollection)]);\r\n            const tiles = tilesSnapshot.docs.map(doc => ({ ...doc.data(), _id: doc.id })).map(tileFirebaseMapper);\r\n            const tokens = tokesSnapshot.docs.map(doc => ({ ...doc.data(), _id: doc.id })).map(tokenFirebaseMapper);\r\n            console.log('%c tiles, tokens: ', 'border: 1px solid blue', tilesSnapshot.docs, tokesSnapshot.docs.map(doc => doc.data()));\r\n\r\n            this._state.next({\r\n                lastUpdate: new Date().getTime(),\r\n                tileCells: tiles.map(contractTile => {\r\n                    const token = tokens.find(t => t.id === contractTile.tokenId);\r\n                    return fromContractTile(contractTile, token || ERROR_TOKEN);\r\n                })\r\n            });\r\n\r\n            return [...tiles];\r\n\r\n        } catch (error) {\r\n            console.log('error with loading docs from collections: ', error);\r\n            throw error;\r\n        }\r\n\r\n        // const tokenIds = tiles.reduce<ContractTokenID[]>((acc, t) => acc.includes(t.tokenId) ? acc : [...acc, t.tokenId], []);\r\n\r\n        // const tokens = await this.fetchTokensByIds(tokenIds);\r\n\r\n        // this._state.next({\r\n        //     lastUpdate: new Date().getTime(),\r\n        //     tileCells: TEST_TILES.map(contractTile => {\r\n        //         const token = tokens.find(t => t.id === contractTile.tokenId);\r\n        //         return fromContractTile(contractTile, token || ERROR_TOKEN);\r\n        //     })\r\n        // });\r\n        // return [...TEST_TILES];\r\n    }\r\n\r\n    async groupTiles(tiles: ITileState[], groupUrl: string): Promise<[boolean, string]> {\r\n        // 1. send to MANAGING_CONTRACT groups of tiles\r\n        // 2. update tiles (from TIMER, but for TEST: update manually here)\r\n        const sortedTiles = tiles.sort((a, b) => a.cellNumber > b.cellNumber ? 1 : -1);\r\n        console.log('%c group tiles ', 'background-color: orange; color: green', tiles, [...sortedTiles]);\r\n        if (!tiles.length) {\r\n            return [false, 'no tiles for grouping'];\r\n        }\r\n\r\n        try {\r\n            await Promise.all(\r\n                sortedTiles.map((tileData, i) =>\r\n                    updateDoc(doc(this._db, 'tiles', tileData.tile._id), tileToFirebaseMapper({ ...tileData.tile, url: !i ? groupUrl : '', boundedTiles: !i ? sortedTiles.map(k => k.tile.id) : [] }))\r\n                )\r\n            );\r\n            await this.fetchTiles();\r\n            return [true, ''];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n        // TEST_TILES = TEST_TILES.reduce<ContractTileInfo[]>((acc, t) => {\r\n        //     const groupingTile = sortedTiles.find(x => x.tile.id === t.id);\r\n        //     console.log('grouping....', t.id, groupingTile);\r\n        //     return !groupingTile ? [...acc, { ...t }] : [\r\n        //         ...acc,\r\n        //         {\r\n        //             ...t,\r\n        //             url: firstTile.tile.id === t.id ? groupUrl : '',\r\n        //             boundedTiles: sortedTiles.map(k => k.tile.id)\r\n        //         }\r\n        //     ];\r\n        // }, []);\r\n        // await this.fetchTiles();\r\n        // return [true, ''];\r\n    }\r\n\r\n    async buyTiles(tiles: ITileState[], url: string): Promise<[boolean, string]> {\r\n        // 1. send to MANAGING_CONTRACT groups of tiles\r\n        // 2. update tiles (from TIMER, but for TEST: update manually here)\r\n        console.log('%c buy tiles ', 'background-color: orange; color: darkcyan', tiles);\r\n        if (!tiles.length) {\r\n            return [false, 'no tiles for buying'];\r\n        }\r\n\r\n        const currAcc = this.getAccount();\r\n\r\n        if (!currAcc) return [false, 'no current account'];\r\n\r\n        try {\r\n            await Promise.all(\r\n                tiles.map((tileData, i) =>\r\n                    updateDoc(doc(this._db, 'tiles', tileData.tile._id), tileToFirebaseMapper({ ...tileData.tile, url, owner: currAcc }))\r\n                )\r\n            );\r\n            await this.fetchTiles();\r\n            return [true, ''];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n        // TEST_TILES = TEST_TILES.reduce<ContractTileInfo[]>((acc, t) => {\r\n        //     const groupingTile = sortedTiles.find(x => x.tile.id === t.id);\r\n        //     console.log('grouping....', t.id, groupingTile);\r\n        //     return !groupingTile ? [...acc, { ...t }] : [\r\n        //         ...acc,\r\n        //         {\r\n        //             ...t,\r\n        //             url: firstTile.tile.id === t.id ? groupUrl : '',\r\n        //             boundedTiles: sortedTiles.map(k => k.tile.id)\r\n        //         }\r\n        //     ];\r\n        // }, []);\r\n        // await this.fetchTiles();\r\n        // return [true, ''];\r\n    }\r\n\r\n    async mintTiles(tiles: IUnmintedTileState[], groupUrl: string): Promise<[boolean, string]> {\r\n\r\n        console.log('mintTiles', tiles);\r\n\r\n        console.log('%c mint tiles ', 'background-color: orange; color: green', tiles);\r\n\r\n        const CURR_ADDR = this.getAccount();\r\n\r\n        if (!CURR_ADDR) {\r\n            return [false, 'no current account address'];\r\n        }\r\n\r\n        if (!tiles.length) {\r\n            return [false, 'no tiles for minting'];\r\n        }\r\n\r\n        try {\r\n            const result = await Promise.all(\r\n                tiles.map((tileData, i) =>\r\n                    addDoc(\r\n                        this._tokensCollection,\r\n                        tokenToFirebaseMapper({\r\n                            id: tileData.cellNumber as ContractTokenID,\r\n                            _id: undefined,\r\n                            owner: this.getAccount() || EMPTY_ADDR,\r\n                            price: '2.5'\r\n                        })\r\n                    )\r\n                )\r\n            );\r\n            console.log('mint result', result);\r\n            await Promise.all(\r\n                tiles.map((tileData, i) =>\r\n                    addDoc(\r\n                        this._tilesCollection,\r\n                        tileToFirebaseMapper({\r\n                            id: tileData.cellNumber as ContractTileID,\r\n                            _id: undefined,\r\n                            boundedTiles: [],\r\n                            owner: this.getAccount() || EMPTY_ADDR,\r\n                            title: new Date().toLocaleString(),\r\n                            url: groupUrl,\r\n                            tokenId: tileData.cellNumber as ContractTokenID,\r\n                        })\r\n                    )\r\n                )\r\n            );\r\n            await this.fetchTiles();\r\n            return [true, ''];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n        // tiles.forEach(t => {\r\n        //     TEST_TILES.push({\r\n        //         _id: t.cellNumber,\r\n        //         id: (t.cellNumber) as ContractTileID,\r\n        //         owner: CURR_ADDR,\r\n        //         tokenId: (t.cellNumber) as ContractTokenID,\r\n        //         title: new Date().toLocaleString(),\r\n        //         url: groupUrl,\r\n        //         boundedTiles: []\r\n        //     });\r\n\r\n        //     TOKENS.push({\r\n        //         id: (t.cellNumber) as ContractTokenID,\r\n        //         owner: CURR_ADDR,\r\n        //         price: t.token ? t.token.price : '2.5',\r\n        //         url: groupUrl,\r\n        //     });\r\n        // });\r\n        // await this.fetchTiles();\r\n        // return [true, ''];\r\n    }\r\n}","import React, { useEffect, useMemo, useRef } from 'react';\r\nimport './App.scss';\r\n\r\nimport Header from './containers/Header';\r\n\r\nimport CellsLayout from './containers/CellsLayout';\r\n\r\nimport { appConfig } from './AppConfig';\r\n\r\nimport { CartEvents, ICartEventData, ICellData, ICellEventData, IUnmintedTileState, ITileState, MyCanvasMouseEvents, TilesEventCart } from './interfaces/cells';\r\n\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport CartModal from './containers/Cart/CartModal';\r\nimport { Subject } from 'rxjs/internal/Subject';\r\nimport { CellEventTypes, CellsEvent } from './containers/CellsLayout/CellsLayout';\r\n\r\nimport ServiceContext from './contexts/ServiceContext';\r\nimport TestDataService from './services/TestDataService';\r\nimport { AccountAddr, EMPTY_ADDR } from './services/interfaces';\r\n\r\nconst App = () => {\r\n\r\n    const cellSize: [number, number] = [appConfig.cellWidth, appConfig.cellHeight];\r\n    console.log('%c render global app! ', 'border: 2px solid red; color: silver; background-color: darkblue;');\r\n\r\n    const dataService = useMemo(() => new TestDataService(), []);\r\n\r\n    const currentAcc$ = useMemo(() => new BehaviorSubject<AccountAddr>(EMPTY_ADDR), []);\r\n\r\n    const cellEvent$ = useMemo(() => new BehaviorSubject<ICellEventData[]>([]), []);\r\n    const selectedCells$ = useMemo(() => new BehaviorSubject<ICellData[]>([]), []);\r\n    const selectedCellsRef = useRef<ICellData[]>([]);\r\n    const cartEvent$ = useMemo(() => new Subject<ICartEventData>(), []);\r\n    const cartState$ = useMemo(() => new Subject<TilesEventCart>(), []);\r\n    const cellsUpdate$ = useMemo(() => new Subject<CellsEvent>(), []);\r\n\r\n    useEffect(() => {\r\n        // 1.   load tiles  [ for every tile we have to load its Token ]\r\n        // 2.   start timer\r\n        // 3.   in every tick: load tiles\r\n        // 4.   find new tiles (compare timesatamps between current loaded tiles and state tiles)\r\n        // 5.   new\\updated tiles: send to eventBus (for displaying)\r\n        dataService.connect()\r\n            .then(isOk => {\r\n                const acc = dataService.getAccount();\r\n                acc && currentAcc$.next(acc);\r\n                dataService.fetchTiles().then(tiles => console.log('%c items loaded! ', 'color: green', [...tiles]));\r\n\r\n            })\r\n            .catch((err) => { });\r\n    }, [dataService, currentAcc$]);\r\n\r\n    useEffect(() => {\r\n        const sub = cellEvent$.subscribe((evArr) => {\r\n            const selected = evArr.filter(t => t.mouseType === MyCanvasMouseEvents.Click).map(t => t.curr);\r\n            const newCells: ICellData[] = [];\r\n            let evCells = [...selected];\r\n            const selectedState = [...selectedCellsRef.current];\r\n            selectedState.forEach(t => {\r\n                // store items of current stated cells if there are not in EV_CELLS\r\n                if (!evCells.find(x => x.cellNumber === t.cellNumber)) newCells.push(t);\r\n                // update EV_CELLS: only cells that are not stored (new)\r\n                evCells = evCells.filter(x => x.cellNumber !== t.cellNumber);\r\n            });\r\n            if (evCells.length || newCells.length) {\r\n                selectedCellsRef.current = [...selected];\r\n                selectedCells$.next([...selected]);\r\n            }\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [cellEvent$, selectedCells$, selectedCellsRef]);\r\n    useEffect(() => {\r\n        const sub = cartEvent$.subscribe((ev) => {\r\n            console.log('%c cartEvent ', 'border: 1px solid green', ev, dataService.getState());\r\n\r\n            const DATA_SERVICE_STATE = dataService.getState().getValue();\r\n\r\n            if (ev.type === CartEvents.Modify) {\r\n                cartState$.next({\r\n                    type: CartEvents.Modify,\r\n                    payload: DATA_SERVICE_STATE.tileCells.filter(t => {\r\n                        return cellEvent$.getValue().find(x =>\r\n                            x.mouseType === MyCanvasMouseEvents.Click\r\n                            && t.cellNumber === x.curr.cellNumber);\r\n                    }),\r\n                    groupUrl: ''\r\n                });\r\n            }\r\n            if (ev.type === CartEvents.Open) {\r\n                cartState$.next({\r\n                    type: CartEvents.Open,\r\n                    payload: cellEvent$.getValue()\r\n                        .filter(t => t.mouseType === MyCanvasMouseEvents.Click)\r\n                        .map<IUnmintedTileState>(t => {\r\n                            const tile = DATA_SERVICE_STATE.tileCells.find(x => x.cellNumber === t.curr.cellNumber);\r\n                            return {\r\n                                cellNumber: t.curr.cellNumber,\r\n                                point: t.curr.point,\r\n                                tile: tile && tile.tile,\r\n                                token: tile && tile.token\r\n                            }\r\n                        }),\r\n                    groupUrl: ''\r\n                });\r\n            }\r\n            if (ev.type === CartEvents.ShowOther) {\r\n                return cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\r\n            }\r\n            if (ev.type === CartEvents.ShowOwn) {\r\n                const myAccount = dataService.getAccount();\r\n                console.log('my account: ', myAccount);\r\n                cellsUpdate$.next([\r\n                    CellEventTypes.DisplayOwnCells,\r\n                    dataService.getState().getValue().tileCells\r\n                        .filter(tileData => tileData.tile.owner === myAccount)\r\n                        .map<ICellEventData>(t => ({\r\n                            mouseType: MyCanvasMouseEvents.None,\r\n                            curr: { cellNumber: t.cellNumber, point: t.point },\r\n                            lastCell: { cellNumber: -1, point: [0, 0] }\r\n                        }))\r\n\r\n                ]);\r\n            }\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [dataService, cartEvent$, cartState$, cellEvent$, cellsUpdate$]);\r\n    useEffect(() => {\r\n        const sub = cartState$.subscribe((ev) => {\r\n            console.log('%c cartState ', 'border: 1px solid blue', ev);\r\n\r\n            // const DATA_SERVICE_STATE = dataService.getState().getValue();\r\n\r\n            if (ev.type === CartEvents.SaveTiles) {\r\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\r\n\r\n                if (tiles.length) dataService.groupTiles([...tiles] as ITileState[], ev.groupUrl);\r\n                // else {\r\n                //     cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\r\n                //     dataService.mintTiles([...ev.payload] as IUnmintedTileState[], ev.groupUrl);\r\n                // }\r\n            }\r\n            if (ev.type === CartEvents.Buy) {\r\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\r\n\r\n                if (tiles.length) dataService.buyTiles([...tiles] as ITileState[], ev.groupUrl);\r\n                else {\r\n                    cellsUpdate$.next([CellEventTypes.DisplayAll, []]);\r\n                    dataService.mintTiles([...ev.payload] as IUnmintedTileState[], ev.groupUrl);\r\n                }\r\n            }\r\n            if (ev.type === CartEvents.RemoveItems) {\r\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\r\n                cellsUpdate$.next([CellEventTypes.Remove, [...tiles] as ITileState[]]);\r\n            }\r\n            if (ev.type === CartEvents.Save) {\r\n                const tiles = ev.payload.filter(t => !!t.tile && !!t.token);\r\n                cellsUpdate$.next([CellEventTypes.UserUpdateTileGroup, [...tiles] as ITileState[]]);\r\n            }\r\n        });\r\n        return () => sub.unsubscribe();\r\n    }, [dataService, cellsUpdate$, cartState$, cellEvent$]);\r\n    return (\r\n        <div id=\"app-container\">\r\n            <ServiceContext.Provider value={ dataService }>\r\n                <Header event$={ cartEvent$ } selectedCells$={ selectedCells$ } />\r\n                <CellsLayout\r\n                    cellSize={ cellSize }\r\n                    currentAcc$={ currentAcc$ }\r\n                    cellsAmount={ appConfig.cellsAmount }\r\n                    cellBorderWidth={ appConfig.cellBorderWidth }\r\n                    maxCanvasWidth={ appConfig.maxCanvasWidth || 0 }\r\n                    event$={ cellEvent$ }\r\n                    cellsUpdate$={ cellsUpdate$ }\r\n                />\r\n                <CartModal event$={ cartState$ } />\r\n            </ServiceContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}